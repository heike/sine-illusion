% !TeX program = pdfLaTeX
\documentclass[12pt]{article}
\usepackage{natbib}
\usepackage{fullpage}
\usepackage{color}
\usepackage[dvipsnames,svgnames]{xcolor}
\usepackage[colorlinks=TRUE, linkcolor=blue]{hyperref}
\usepackage{wrapfig,float}
\usepackage{caption}
\usepackage{subcaption}
\usepackage{graphicx}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{url}
\usepackage{ulem}
\usepackage[section]{placeins}
\usepackage{sidecap}

% test change
% help with editing and coauthoring
\usepackage[colorinlistoftodos]{todonotes}

\graphicspath{{figure/}}
\renewcommand{\floatpagefraction}{.99}

\newcommand{\range}[1]{{\text{range}\left(#1\right)}}
\newcommand{\s}[2]{{_{#1}s^{ #2}}}
\newcommand{\atan}[1]{\text{atan}\left({#1}\right)}
\newcommand{\done}[2][inline]{\todo[color=SpringGreen, #1]{#2}}  % for todos that have been seen and dealt with
\newcommand{\meh}[2][inline]{\todo[color=White, #1]{#2}}   % for todos that may no longer be relevant 
\newcommand{\comment}[2][inline]{\todo[color=SkyBlue, #1]{#2}} % for comments that may not be "to-do"s
\newcommand{\mcomment}[1]{\todo[color=SkyBlue]{#1}} % for margin comments

\newcommand{\newtext}[1]{\todo[inline, color=White]{ \color{OliveGreen}{#1}}} % new text - not necessarily something to be done
\newcommand{\newdo}[1]{\todo[inline, color=Plum]{#1}} % new to do item
\newcommand{\move}[1]{\todo[inline, color=Lime]{#1}} % new to do item


<<setup, fig.keep='all', cache=FALSE, echo=FALSE, eval=TRUE>>=
rm(list=ls())
options(replace.assign=TRUE,width=70)
require(knitr)
opts_chunk$set(fig.path='figure/fig-', cache.path='cache/', fig.align='center', fig.width=5, fig.height=5, fig.show='hold', par=TRUE, cache=TRUE, concordance=TRUE, autodep=TRUE)
library(reshape2)
suppressMessages(library(ggplot2))
library(plyr)
suppressMessages(library(gridExtra))

createSine <- function(n=200, len=1, f=f, fprime=fprime, f2prime=f2prime, a=0, b=2*pi) {
  x <- seq(a, b, length=n+2)[(2:(n+1))]
  ell <- rep(len, length=length(x))
  fx <- f(x)
  ystart <- fx - .5*ell
  yend <- fx + .5*ell

  # now correct for line illusion in vertical direction
  dy <- diff(range(fx))
  dx <- diff(range(x))
  # fprime works in framework of dx and dy, but we represent it in framework of dx and dy+len
  # needs to be fixed by factor a:  
  a <- dy/(dy + len) 
  # ellx is based on the "trig" correction
  ellx <- ell / cos(atan(abs(a*fprime(x))))
  # ellx2 is based on linear approximation of f  
  ellx2 <- ell * sqrt(1 + a^2*fprime(x)^2)
  
  # make this a data frame - ggplot2 doesn't do well with floating vectors
  dframe <- data.frame(x=x, xstart=x, xend=x, y=fx, ystart=ystart, yend=yend, ell=ell, ellx = ellx, ellx2=ellx2)
  
  # third adjustment is based on quadratic approximation of f.
  # this needs two parts: correction above and below f(x)  
 
  fp <- a*fprime(x)
  f2p <- a*f2prime(x)

  lambdam = (fp^2 + 1 + sqrt((fp^2 + 1)^2 + ell*f2p*fp^2))^-1
  lambdap = (- fp^2 - 1 + sqrt((fp^2 + 1)^2 - ell*f2p*fp^2))^-1
  inner <- pmin(1/2*(abs(lambdap)*sqrt(fp^2 + 1))^-1, 1/2*(abs(lambdam)*sqrt(fp^2 + 1))^-1)
  outer <- pmax(1/2*(abs(lambdap)*sqrt(fp^2 + 1))^-1, 1/2*(abs(lambdam)*sqrt(fp^2 + 1))^-1)

  dframe$ellx4.l <- inner
  dframe$ellx4.u <- outer
  idx <- which(f2p < 0)
  dframe$ellx4.l[idx] <- outer[idx]
  dframe$ellx4.u[idx] <- inner[idx]
  k <- which(diff(f2p < 0) != 0)+1
  yoff <- max(inner+outer)/2  # not sure whether this works in practice - if 
  # there is a vertical shift that shouldn't be there, this is why
  dframe$ellx4.l[idx] <- dframe$ellx4.l[idx] - yoff
  dframe$ellx4.u[idx] <- dframe$ellx4.u[idx] + yoff
  
  dframe$ellx4.l[-idx] <- dframe$ellx4.l[-idx] + yoff
  dframe$ellx4.u[-idx] <- dframe$ellx4.u[-idx] - yoff
  
  dframe
}

getSecantSegment <- function(x0, df, f, fprime, f2prime){
  ell     <- sapply(x0, function(i) df$ell[which.min(abs(i-df$x))]/2)
  
  dy <- diff(range(df$y))
  dx <- diff(range(df$x))
  a <- dx/(dy + 2*ell) 
  
  fp <- a*fprime(x0)
  f2p <- a*f2prime(x0)
  lambdap <- (sqrt((fp^2+1)^2-f2p*fp^2*ell) + fp^2 + 1)^-1    
  lambdam <- -(sqrt((fp^2+1)^2+f2p*fp^2*ell) + fp^2 + 1)^-1    
  lambdam = (fp^2 + 1 + sqrt((fp^2 + 1)^2 + ell*f2p*fp^2))^-1
  lambdap = (- fp^2 - 1 + sqrt((fp^2 + 1)^2 - ell*f2p*fp^2))^-1

  #---- Approximation
  
  x2 <- lambdap*fprime(x0)+x0
  x1 <- lambdam*fprime(x0)+x0
  y2 <- f(x0)-lambdap
  y1 <- f(x0)-lambdam
  #----
 
  df2 <- data.frame(x=x0, y=f(x0), deriv=fprime(x0),
                    sec.xstart=x1, sec.xend = x2, 
                    sec.ystart=y1, sec.yend = y2,
                    ell = 2*ell)

  df2$sec.ellp <- (4*abs(lambdap)*sqrt(1+fp^2))^-1
  df2$sec.ellm <- (4*abs(lambdam)*sqrt(1+fp^2))^-1
#   df2$sec.ellp <- with(df2, sqrt((sec.yend-y)^2+(sec.xend-x)^2))
#   df2$sec.ellm <- with(df2, sqrt((y-sec.ystart)^2+(x-sec.xstart)^2))
  df2$type <- "Perceived Width"
  df2$a <- a
  return(df2)
}

@




\title{Signs of the Sine Illusion -- why we need to care}
\author{Susan Vanderplas, Heike Hofmann, Dianne Cook, Xiaoyue Cheng}

\begin{document}
\maketitle
\begin{abstract}
The sine illusion, which is part of a set of optical illusions which occur based on a conflict between a stimuli and the real-world situation which can cause similar stimuli, has a notable impact on perception of time-series data with a seasonal component. In this paper, we discuss the reasons for the illusion and various strategies which might be useful to break the illusion or reduce its' strength, demonstrating the presence of the illusion in real-world and theoretical situations. We also present data from user studies which demonstrate the dramatic effect the sine illusion can have on conclusions drawn from displayed data.
\end{abstract}
\tableofcontents

\section{Introduction}
Graphics are powerful tools for summarizing large or complex data. The main premise in our dealings with statistical graphics is that
graphics have to be true to the data \citep[see e.g.][]{tufte, wainer:2000, robbins:2005}. Generally, we see a lot of discussion on keeping true to the data in the framework of (ab)using three dimensional effects in graphics. \citep{tufte} goes as far as defining a {\it lie-factor} -- the ratio of the size of an effect in the data compared to the size of an effect shown, with the premise that any large deviations from one indicate a misuse of graphical techniques. Computational tools help us ensure technical trueness -- but this brings up the additional question of how we deal with situations that involve innate inability or trigger learned misperceptions. In this paper we want to raise awareness for one of these situations, show that it occurs frequently in our dealings with graphics and provide different attempts at solving or avoiding it.


<<example,echo=FALSE, include=FALSE>>=
#source("./data/NewOzoneData.R")
datasub <- read.csv("data/Ozone-subset.csv")
nsite <- length(unique(datasub$SiteID))
qplot(data=datasub, x=jitter(Tmax), y=Ozone, geom="point", colour=I("grey30"), alpha=I(.5), xlab="Temperature (F)", ylab="8-hour Average Ozone Concentration (ppm)") + geom_line(aes(x=Tmax, y=fit), size=1.25, colour="steelblue") + theme_bw()
qplot(data=datasub, x=jitter(Tmax), y=resid, geom="point", colour=I("grey20"), alpha=I(.5), xlab="Temperature (F)", ylab="Residual Ozone Concentration (ppm)") + geom_line(aes(x=Tmax, y=0*resid), size=1.25, colour="steelblue") + theme_bw()
@


Figure \ref{fig:example1} shows daily measurements of 8-hour average ozone concentration and temperature at several sites in Houston, for days in 2011 with temperatures above $45^\circ$F  and dew points of less than $60^\circ$F. %(as ozone concentration is related to temperature and humidity)
A loess smooth line is added for reference. 
Ozone concentrations were gathered from \Sexpr{nsite} locations in the Houston area \citep{epa}, and weather data is aggregated from the NCDC \citep{noaa} site at Hobby International Airport, which is located near the center of Houston. 
Figure~\ref{fig:example2} shows a residual plot of the same data, created by subtracting the loess fit line from the observed data, leaving only the variability behind. 
%\done{I like this example! But we still need to suggest that the trumpet shape in the residuals comes as a surprise to lots of people.}

\begin{figure}[h!tbp]\centering
\begin{subfigure}[b]{.45\linewidth}
  \centering
  \includegraphics[width=\textwidth]{figure/fig-example1}
  \caption{\small All data}
  \label{fig:example1}
\end{subfigure}
\begin{subfigure}[b]{.45\linewidth}
  \centering
  \includegraphics[width=\textwidth]{figure/fig-example2}
  \caption{\small Residuals}
  \label{fig:example2}
\end{subfigure}
\caption{\label{fig:exampleFull1} Ozone and Temperature in Houston, 2011. Loess fit is shown in (a); (b) shows the residuals from the line fit. What seems to be the trend in overall variance? Is the variance trend in (a) consistent with the residual plot in (b)?}
\end{figure}

The increasing variance with temperature is camouflaged in the Figure \ref{fig:example1} due to the changes in slope, but is very obvious in the residual plot in Figure \ref{fig:example2}. The sine illusion is responsible for the appearance of constant variance in Figure \ref{fig:example1}, but once the trend has been removed, and thus the corresponding changes in slope are no longer a factor, the increasing variance is visible.

The sine illusion (also known in graphical literature as the line width illusion) is a frequent occurrence in statistical analysis, and graphical displays should be thoughtfully considered to minimize its effect visually and acknowledge its influence. Figure \ref{fig:original} shows the classical sine illusion. The parameters that influence the sine illusion are the amplitude of the function and the line length. 
With an increase in the length of lines,  the apparent difference in the length decreases. Any modification that increases the apparent slope of the curves, such as an increase in the amplitude or a change towards a more extreme aspect ratio makes the apparent difference in line lengths more pronounced. 


<<functions, echo=FALSE, eval=TRUE>>=
f <- function(x) 2*sin(x)
fprime <- function(x) 2*cos(x)
f2prime <- function(x) -2*sin(x)
@
<<original, dependson='functions', echo=FALSE, fig.width=5, fig.height=5, include=FALSE>>=
qplot(x=x, xend=xend, y = ystart, yend=yend, geom="segment", data=createSine(40, 1, f=f, fprime=fprime, f2prime)) +
  theme(panel.grid.major=element_blank(), panel.background = element_rect(fill = "white", 
                colour = "black"),
       panel.grid.minor=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank()) + coord_equal(ratio=1)
@
<<original-redo, echo=FALSE, fig.keep='none', results='hide', fig.keep='all'>>=
cairo_pdf("./figure/fig-original-redo.pdf", width=5, height=5)
df1 <- createSine(20,1, f=f, fprime=fprime, f2prime=f2prime)
df1$colour <- c(rep("A", 5), "A", rep("A", 13), "A")
qplot(x=xstart, xend=xend, y = ystart, yend=yend, geom="segment", data=df1, colour=I("grey20")) +
  theme(panel.grid.major=element_blank(), 
        panel.background = element_rect(fill = "white", colour = "black"),
        panel.grid.minor=element_blank(), panel.background=element_blank(),
        axis.title = element_blank(), axis.ticks = element_blank(), 
        axis.text = element_blank()) + coord_equal(ratio=1) + 
  geom_segment(x=-pi/12, xend=2*pi+pi/12, y=0, yend=0, colour="grey80", linetype=2)+
  geom_segment(aes(x=x, xend=xend, y=y, yend=yend), colour="grey50", 
               data=data.frame(x=c(df1$x[6],  mean(df1$x[5:6]), mean(df1$x[5:6])), 
                               xend = c(mean(df1$x[5:6]), mean(df1$x[5:6]), df1$x[6]),
                               y = c(df1$y[6], df1$y[6], 0), 
                               yend = c(df1$y[6], 0, 0)), size=1) + 
  geom_text(aes(x=df1$x[5], y=df1$y[6]/2, label="s"), hjust=1, vjust=.5, size=10, colour="grey50") + 
  geom_segment(aes(x=x, xend=xend, y=y, yend=yend), colour="grey60", 
             data=data.frame(x=c(df1$x[20],  mean(df1$x[19:20]), mean(df1$x[19:20])), 
                             xend = c(mean(df1$x[19:20]), mean(df1$x[19:20]), df1$x[20]),
                             y = c(df1$ystart[20], df1$ystart[20], df1$yend[20]), 
                             yend = c(df1$ystart[20], df1$yend[20], df1$yend[20])), size=1) +
  geom_text(aes(x=df1$x[19], y=df1$y[20], label="\u2113"), hjust=1, vjust=.5, size=10, colour="grey60")
dev.off()
@
\begin{figure}[hbtp]
\centering
\includegraphics[keepaspectratio=true, width=.5\linewidth]{figure/fig-original}
% \includegraphics[keepaspectratio=true, width=\linewidth]{fig-original-redo.pdf}
\caption{The original Sine Illusion consists of evenly spaced vertical lines centered around the graph of $y=\sin(x)$. The lines in the peak and trough of the curve appear to be longer than in the other regions.}\label{fig:original}
%The right graph illustrates the parameters determining the appearance of the illusion: $s$ denotes the amplitude of the function, $\ell$ the length of the line segments.
\end{figure}
%The first documentation we could find of this illusion,
In the cognitive literature, \cite{day:1991} first documented the illusion in the context of sinusoidal vertical lines. More recently the illusion has been documented on non-sinusoidal curves \citep{schonlau:2003, marie}, but the underlying effect seems to be the same,  that is, the illusion does not rely on the periodic nature of the underlying trendline but only on its slope and  changes to it. Figure \ref{fig:twoillusions-simulation} shows an example of the sine illusion with an underlying periodic function, with both a nonlinear trend and a periodic component, and additionally with only a nonlinear trend. All three graphs seem to show nonconstant variance; in reality, the variance is constant in all of them. Clearly, the illusion does not rely on the periodicity of the function for which it was named,, instead the ``line width illusion" and the ``sine illusion" are symptoms of the same phenomenon, even though the cognitive literature and the graphics literature refer to the illusion differently. 


<<simulation1Sine, echo=FALSE, fig.width=4, fig.height=4, include=FALSE>>=
alph <- .25
x <- rep(seq(0,2*pi*2, length=120), each=50)
y <- rnorm(n=length(x), mean=sin(x), sd=0.2)
qplot(x,y, geom="jitter", alpha=I(alph))+ 
  geom_line(y=0*x) + 
  scale_x_continuous(breaks=seq(0, 4*pi, by=pi), 
                     labels=c("0", expression(paste(pi)), 
                              expression(paste("2", pi)), 
                              expression(paste("3", pi)), 
                              expression(paste("4", pi)))) +
  theme_bw()
#x <- rep(seq(0,2*pi*2, length=120), each=100)
y <- rnorm(n=length(x), mean=1/10*(-x+pi)^2+sin(x), sd=0.2)
qplot(x,y, geom="jitter", alpha=I(alph))+ 
  geom_line(y=1/10*(-x+pi)^2) + 
  scale_x_continuous(breaks=seq(0, 4*pi, by=pi), 
                     labels=c("0", expression(paste(pi)), 
                              expression(paste("2", pi)), 
                              expression(paste("3", pi)), 
                              expression(paste("4", pi)))) +
  theme_bw()
#x <- rep(seq(0,2*pi*2, length=120), each=100)
y <- rnorm(n=length(x), mean=1/10*(-x+pi)^2, sd=0.2)
qplot(x,y, geom="jitter", alpha=I(alph))+ 
  geom_line(y=1/10*(-x+pi)^2) + 
  scale_x_continuous(breaks=seq(0, 4*pi, by=pi), 
                     labels=c("0", expression(paste(pi)), 
                              expression(paste("2", pi)), 
                              expression(paste("3", pi)), 
                              expression(paste("4", pi)))) +
  theme_bw()
@
\begin{figure}[h!tbp]\centering
\begin{subfigure}[b]{.31\linewidth}
  \centering
  \includegraphics[keepaspectratio=TRUE,width=\linewidth]{figure/fig-simulation1Sine1}
  \caption{\small Seasonality, No Trend}
  \label{simulation1}
\end{subfigure}
\begin{subfigure}[b]{.31\linewidth}\centering
  \includegraphics[keepaspectratio=TRUE,width=\linewidth]{figure/fig-simulation1Sine2}
  \caption{\small Seasonality and Trend}
  \label{simulation2}
\end{subfigure}
\begin{subfigure}[b]{.31\linewidth}\centering
  \includegraphics[keepaspectratio=TRUE,width=\linewidth]{figure/fig-simulation1Sine3}
  \caption{\small Trend, No Seasonality}
  \label{simulation3}
\end{subfigure}
\caption{Set of three scatterplots of simulated data with constant variance. Plot (a) shows seasonality without any underlying trend, (b) shows seasonality superimposed on a quadratic trend, and (c) shows a quadratic trend without seasonality. Though all three sets of simulated data have constant variance, none of the variances appear constant due to the sine illusion.}\label{fig:twoillusions-simulation}
\end{figure}

Sections \ref{perceptualexplanations} and \ref{statisticalgraphics} explore the perceptual and statistical literature examining this illusion.
%\FloatBarrier
\subsection{Statistical Graphics and the Sine Illusion}\label{statisticalgraphics}
The sine illusion demonstrated in Figures \ref{fig:exampleFull1} and \ref{fig:original} has been frequently noted in statistical graphics, though usually not as an optical illusion. Rather, the problem is typically identified as the difficulty of visually subtracting two curves, and the resulting erroneous conclusions when this process goes awry. Figure \ref{fig:playfair-debt} shows one of the possibly oldest example of this common phenomenon \citep{playfair, playfair2}: the graph shows the imports to and exports from the East Indies to England between 1700 and 1780; the vertical distance between the two lines is much less visually salient than the orthogonal width of the line, that is, the width of the line segment which is perpendicular to the tangent line at a given point.

\begin{figure}[h!tbp]
\centering
\includegraphics[keepaspectratio=TRUE,width=.8\linewidth]{images/PlayfairExportImports}
\caption{Playfair's graph of exports to and imports from the East Indies demonstrates that the line width illusion is not only found on sinusoidal curves but is present whenever the slope of the lines change dramatically. The increase in both imports and exports circa 1763 does not appear to portray as large of a deficit as that in 1710, even though they are of similar magnitude.}
\label{fig:playfair-debt}
\end{figure}

Another example of this phenomenon is shown in Figure \ref{fig:robbins-graph} \citep{robbins:2005}, which contains the lines $e^x$ and $e^x+1$. The lines appear to be separated by a much smaller distance at $x=2.5$ than at $x=0$, even though mathematically it is obvious that the distance between them is constant. The line width illusion seems to be related to increasing slope - as the slope increases, the apparent distance between the two lines decreases, even though the lines represent a constant vertical shift.
<<effectivegraphsfig,echo=FALSE, include=FALSE>>=
x <- seq(0, 2.5, .01)
y1 <- exp(x)
y2 <- exp(x)+1
df <- data.frame(x=x, y=y1, y2=y2)
qplot(data=df, x=x, y=y, geom="line") + geom_line(aes(y=y2)) + theme_bw()
@
\begin{SCfigure}
\centering
\includegraphics[width=.45\linewidth]{figure/fig-effectivegraphsfig}
\caption{A replication of Figure 2.16 in \cite{robbins:2005}. Lines $y=e^x$ and $y=e^x+1$ appear  to converge as $x$ increases due to the line width illusion.\label{fig:robbins-graph}}
\end{SCfigure}

%\FloatBarrier
\subsection{Perceptual Explanations for the Sine Illusion}\label{perceptualexplanations}
While not thoroughly examined in the sensation and perception literature, the sine illusion has been classified as part of a group of geometrical optical misperceptions  related to the M\"uller-Lyer illusion \citep{day:1991} or the Poggendorf illusion \citep{poggendorf}, which puts the illusion into the framework of context-based illusions.
\cite{day:1991} suggest that
the sine illusion occurs due to misapplication of perceptual experience with the three-dimensional world to a two-dimensional ``artificial" display of data. Figure \ref{fig:ribbon-illusion} shows one possible three-dimensional context for the classical sine illusion; two ribbons are shown at varying perspective strengths. The first appears more natural, but the second still appears three-dimensional and is much closer to the sine illusion stimuli with added shading. 

\begin{figure}[h!tbp]\centering
<<ribbon-illusion,echo=FALSE, include=FALSE, fig.width=5, fig.height=5>>=

f <- function(x) 2*sin(x)
fprime <- function(x) 2*cos(x)
f2prime <- function(x) -2*sin(x)

# qplot(x=x, xend=xend, y = ystart, yend=yend, geom="segment", data=createSine(40, 1, f=f, fprime=fprime, f2prime), colour=I("black")) +
# #   geom_line(aes(x=x, y=ystart), colour="black") + 
# #   geom_line(aes(x=x, y=yend), colour="black") + 
#   theme(panel.grid.major=element_blank(), panel.background = element_rect(fill = "white", colour = "white"),
#         panel.grid.minor=element_blank(), panel.background=element_blank(),
#         axis.title = element_blank(), axis.ticks = element_blank(), 
#         axis.text = element_blank()) + coord_equal(ratio=1)

x <- seq(0, 2*pi, length=42)[2:41]
data <- do.call("rbind", lapply(seq(-.5, .5, 1), function(i) data.frame(x=x, y=2*sin(x), z=i)))

data.persp <- acast(data, x~z, value.var="y")
x <- sort(unique(data$x))
y <- sort(unique(data$y))
z <- sort(unique(data$z))

persp(x, z, data.persp,  xlab="", ylab="", zlab="", theta=0, phi=45, border="black", shade=.35, col="white", xlim=c(-pi/12, 2*pi+pi/12), ylim=c(-1.75, 1.75), scale=FALSE, box=FALSE, expand=3/pi, d=3) # , ltheta=0, lphi=-15
persp(x, z, data.persp,  xlab="", ylab="", zlab="", theta=0, phi=45, border="black", shade=.35, col="white", xlim=c(-pi/12, 2*pi+pi/12), ylim=c(-1.75, 1.75), scale=FALSE, box=FALSE, expand=3/pi, d=50) # , ltheta=0, lphi=-15

# data$transx <- trans3d(data$x, data$z, data$y, p)$x
# data$transy <- trans3d(data$x, data$z, data$y, p)$y
# 
# p <- persp(x, z, data.persp, xlab="", ylab="", zlab="", theta=0, phi=45, border="black", shade=.35, col="white", xlim=c(-pi/12, 2*pi+pi/12), ylim=c(-1.75, 1.75), scale=FALSE, box=FALSE, d=50, expand=3/(pi)) # , ltheta=0, lphi=-15
@
\begin{subfigure}[t]{.49\linewidth}\centering
\includegraphics[width=\linewidth, keepaspectratio=TRUE, trim=0in 1.5in 0in 1.5in]{figure/fig-ribbon-illusion1}
\caption{Perspective plot of sine illusion}
\end{subfigure}
\begin{subfigure}[t]{.49\linewidth}\centering
\includegraphics[width=\linewidth, keepaspectratio=TRUE, trim=0in 1.5in 0in 1.5in]{figure/fig-ribbon-illusion2}
\caption{Perspective plot, vanishing point near infinity.}
\end{subfigure}
\caption{Two different perspective projections of the same data responsible for the sine illusion. The first projection angles the lines and appears much more natural, but the second projection suggests that the lines do not need to be angled to create the same three-dimensional impression.}
\label{fig:ribbon-illusion}
\end{figure}

Experience with real-world objects suggests that the data are most similar to a slightly angled top view of a 3-dimensional strip such as a ribbon, as shown in figure \ref{fig: ribbon-ilusion}(a).  % goldstein S&P 8th edition pg 249
As the vanishing point moves further away from the viewer, as in figure \ref{fig: ribbon-ilusion}(b), the ribbon plot more closely resembles the sine illusion. By treating the graph as a two-dimensional projection of a three-dimensional figure, the illusion disappears and the line widths seem once more to be constant.

<<originalgrid, dependson='data', echo=FALSE, include=FALSE, fig.width=5, fig.height=4>>=
f <- function(x) 2*sin(x)
fprime <- function(x) 2*cos(x)
f2prime <- function(x) -2*sin(x)

dframe <- createSine(n = 40, len = 1, f=f, fprime=fprime, f2prime)
require(grid)
qplot(x=x, xend=xend, y = ystart*ell, yend=yend*ell, geom="segment", data=dframe) +
  theme(panel.grid.major.y=element_line(colour="grey75"), 
        panel.grid.minor.y=element_line(colour="grey85"), 
        panel.grid.major.x=element_blank(),
        panel.background = element_rect(fill = "white", 
                colour = "black"),
       panel.grid.minor.x=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank(), 
        plot.margin = unit(c(.1,.1,.1,.1), "cm")) + coord_equal(ratio=1) + 
  geom_segment(size=1.5, data=dframe[c(31, 38),]) 
@
\begin{SCfigure}
\centering
\caption{\label{fig:original-grid} The sine illusion with two individual lines highlighted. Horizontal grid lines do not help  to resolve the illusion, even though they provide a clear basis for comparison of line lengths. Readers are much better at assessing the length of the two singled out line segments; they are equal.}
\includegraphics[width=.5\linewidth]{figure/fig-originalgrid}
\end{SCfigure}

Though it is typically a bad idea to use three-dimensional representations when two dimensions are adequate to display the data \citep{tufte}, counteracting a visual heuristic might make that approach more viable. However, a three-dimensional projection of two-dimensional data is not easy to create and would likely lead to distortions and instability in the visual display. In particular, there does not seem to be an simple guideline for determining the projection angle or color gradient  to create the illusory depth to remove the optical illusion. 

%That is, the illusion breaks down if the visual heuristic is pre-empted by an attempt to view the graph as if it were three dimensional or if each piece is considered without the surrounding context. 

Further, the illusion  only  holds when a significant portion of the graph is considered simultaneously without regard to the perceptual mechanisms at play, The contextual cues of the overall trend are critical to the sine illusion's effect; without those cues (either by subtraction of the trend or by considering only one or two lines at a time) the illusion does not occur. In particular, our judgment in comparing the lengths of two lines is relatively accurate, as e.g. discussed in \citet{cleveland:1984}. See \cite{day:1991} for a more thorough discussion of how much surrounding context is required for the illusion to persist. The bold lines in figure \ref{fig:original-grid} are clearly the same length, as comparing individual lines is a fairly simple task. The illusion arises when sufficient context is available to induce an ambiguously three-dimensional figure.


What follows are several methods to ``break" the illusion's effect and allow for more accurate graphical conclusions.

%\FloatBarrier
\subsection{Geometry of the Illusion}
We have previously alluded to the fact that the sine illusion seems to depend on the change in the slope of the underlying function; what follows is a geometric explanation of why this occurs. In particular, our perceptual system is optimized for three dimensions; leading us to perceive the orthogonal width (the shortest line between the top and bottom curves) as the vertical length. Figure \ref{fig:OrthogonalWidth} demonstrates the change in orthogonal width as the slope of the line tangent to $f(x)$ changes; these changes correspond to our perception of apparent line length. 
<<transform-illustration,echo=FALSE, message=FALSE, warning=FALSE, include=FALSE, fig.width=6, fig.height=4>>=
f <- function(x) 2*sin(x)
fprime <- function(x) 2*cos(x)
f2prime <- function(x) -2*sin(x)
library(plyr)
dframe <- createSine(n = 150, len = 1, f=f, fprime=fprime, f2prime=f2prime)
dframe$ystartcts <- dframe$ystart
dframe$yendcts <- dframe$yend
dframe[1:150,c(2, 3, 5, 6)] <- NA
dframe[(1:15)*10-5, c(2, 3)] <- dframe[(1:15)*10-5, 1] 
dframe[(1:15)*10-5, 5] <- dframe[(1:15)*10-5, 4] - .5
dframe[(1:15)*10-5, 6] <- dframe[(1:15)*10-5, 4] + .5
dframe$type <- "Data"

idx <- which(!is.na(dframe$xstart))
dframe.1 <- getSecantSegment(dframe$xstart[idx], dframe, f, fprime, f2prime)
dframe.1$x <- dframe$x[idx]
dframe.1$y <- dframe$y[idx]
dframe.1$ystartcts <- dframe$ystartcts[idx]
dframe.1$yendcts <- dframe$yendcts[idx]
names(dframe.1) <- c("x", "y", "deriv", "xstart", "xend", "ystart", "yend", "ell", "ell.quad1", "ell.quad2", "type", "a", "ystartcts", "yendcts")
# names(dframe.1) <- c("x", "y", "deriv", "xstart", "xend", "ystart", "yend", "ell", "ell.quad1", "ell.quad2", "type")
# dframe.1 <- dframe.1[!is.na(dframe.1$x),]
dframe.1$vangle <- with(dframe.1, atan(deriv))
# dframe.1$x <- dframe$x
# dframe.1$y <- dframe$y
# dframe.1$ystartcts <- dframe$ystartcts
# dframe.1$yendcts <- dframe$yendcts
dframe <- rbind.fill(dframe, dframe.1)


qplot(x=x, y=y, geom="line", data=dframe, colour=I("grey50")) + theme_bw() + 
  geom_line(aes(y=ystartcts), colour="grey50", linetype=4) + 
  geom_line(aes(y=yendcts), colour="grey50", linetype=4) +
  geom_segment(data=subset(dframe, !is.na(type)), aes(x=xstart, xend = xend, y=ystart, yend=yend, colour=type))  + xlab("") + ylab("") +
  coord_equal(ratio=1) + scale_colour_manual("", values=c("black", "blue")) + 
#   geom_text(aes(label=paste(round(vangle/pi*180), "^o", sep=""),
#                 x=xstart*(x<pi/2 | x>1.5*pi) + xend*(x>pi/2 & x<1.5*pi), y=ystart*(x<pi/2 | x<1.5*pi) + yend*(x>pi/2 & x<1.5*pi)), 
#             data=dframe.1, parse=TRUE, hjust=1, vjust=.5, size=2.5) + 
  geom_text(aes(label=paste("theta", "%~~%", round(abs(vangle)/pi*180), "^o", sep=""),
                x=pmax(xstart, xend)/2+x/2+.2, y=y-sign(vangle)*.6+.02), 
            data=dframe.1, parse=TRUE, hjust=.9, vjust=.5, size=3) + 
  scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), 
                     labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi)))) #+ 
  # facet_wrap(~type)
  # + ggtitle("Changes in Perceived Orthogonal Width \ndue to Change in Secant Angle")
@
\begin{figure}[h!tbp]
\centering
\includegraphics[width=.65\linewidth, keepaspectratio=TRUE]{figure/fig-transform-illustration}
\caption{\label{fig:OrthogonalWidth} The sine illusion with secant lines (lines orthogonal to the tangent line at $f(x)$). The perception that the vertical length changes with $f(x)$ corresponds to changes in actual orthogonal width due to the change in secant angle. 
}
\end{figure}
Secant line and vertical line are both sketched out in figure~\ref{fig:OrthogonalWidth}. The illusion is most pronounced in areas where the angle between the secant segment and the vertical line is the largest. The perceived length of the vertical line changes with the angle of the line perpendicular to the slope of $\sin(x)$, suggesting that the sine illusion stems from a conflict between the visual system's perception of figure width and the mathematical judgement necessary to determine the length of the vertical lines. 
<<geometry,echo=FALSE, fig.height=2.1, fig.width=3.5, include=FALSE>>=
f <- function(x, a=1, b=0) a*x + b
x  <- seq(-.2,.2, .1)
ell <- .1
a <- 1
intx <- ell/(a + 1/a)
ribbon <- data.frame(x = x, ytop = f(x) + ell, ybottom = f(x)-ell)
aline <- data.frame(xtop = 0,    xbottom = 0,   ytop = f(0) + ell,  ybottom = f(0) - ell, label="vertical width")
bline <- data.frame(xtop = -intx, xbottom = intx, ytop = f(-intx)+ell, ybottom = f(intx)-ell, label="extant width")
widths <- rbind(aline, bline)
qplot(data=ribbon, x=x, ymin=ybottom, ymax=ytop, geom="ribbon", fill=I("grey")) +
  theme(panel.grid.major=element_blank(), 
#        panel.background = element_rect(fill = "white", colour = "black"),
        panel.grid.minor=element_blank(), panel.background=element_blank(),
        axis.title = element_blank(), axis.ticks = element_blank(), 
        axis.text = element_blank()) +  
  geom_segment(data=widths, aes(x=xbottom, xend = xtop, y=ybottom, yend=ytop, linetype=label)) +
  geom_text(data=widths, aes(x=mean(c(xbottom[1], xbottom[2], 0)), y=mean(c(ybottom[1], ybottom[2], ybottom[2])), label="theta"), parse=TRUE) +
  coord_equal(ratio=1) + scale_linetype_discrete("") + theme(plot.margin = unit(c(-1,-1,-2,-2), "lines"))
@


The visual preference for judging the length of the line by the orthogonal extant suggests that the underlying illusion may be a function of geometry rather than some mysterious visual or neural process that occurs automatically between perception of the stimulus and conscious thought. If this is the case, then it may be  possible to correct the graphical display for so that it is not as visually deceptive. 
From a statistical standpoint, when we judge the variability of data, we must overcome the visual bias due to the sine illusion. As it turns out, this illusion is incredibly difficult to overcome even when we are aware of its presence: our brains simply cannot ``un-see" the illusion. A geometrical correction that would at least temporarily remove the illusion would be a valuable tool in visual analysis.

What follows is a compilation of various methods to correct for or mitigate the effect of the illusion, intended primarily to demonstrate how pervasive the illusion is and the extreme methods necessary to remove its' effect. 

\section{Breaking the Illusion}
The illusion is caused by a conflict between the vertical length and the orthogonal width, which is itself a function of the slope. As such, we can resolve the illusion by making the orthogonal width constant. We consider several approaches to forcing the orthogonal width to be constant:  (1) separating the trend and the variability, (2) forcing the slope to be constant (by reparameterizing the $x$ axis), or (3) making the lines appear to be of the same height by adjusting their lengths to maintain a constant orthogonal width. Each of these approaches is discussed in the following section.

\subsection{Trend Removal}
\cite{cleveland:1984, cleveland:1985} discuss the perceptual difficulty of judging the difference between two curves plotted on the same axis. They recommend the difference between the two curves as an alternate display, as shown in the second part of Figure \ref{fig:cleveland-figure}. A loess smooth was used to estimate the trendline, and this estimate was subtracted from the line center to produce separate graphs of the trend and the variance. This is in line with  recommendations  for good graphics to `show the data' rather than make the reader derive some aspect of it \citep[e.g.][]{wainer:2000}. In particular, this is the generally accepted procedure for assessing model fit. 

While removing the trend and showing variability separately does largely remove the sine illusion, it also makes it  more difficult to parse the overall data, as judgments must be made by combining two graphs or by mentally re-composing the original graph (at which point, the sine-illusion becomes a factor). We ideally want to tell the whole story with a single graph, to minimize cognitive demands. While this example is relatively simple, it would be much harder to create a de-trended version of Figure \ref{fig:playfair-debt} that could be easily assessed to determine both trend and change in the size of the trade imbalance over time. 


<<cleveland, echo=FALSE, fig.width=6, fig.height=6, include=FALSE>>=
f <- function(x) -x^2
sdf <- function(x) (4-0.5*x)/5
  
x <- seq(-2,2.5, by=0.1)

id <- 1:30
dframe <- expand.grid(x=x, id=id)
dframe$y <- with(dframe, rnorm(n=nrow(dframe), mean=f(x), sd=sdf(x)/2))
qplot(x,y, data=dframe, geom="jitter") + theme_bw()
dframe$Trend <- f(dframe$x)
dframe$Residuals <- dframe$y - dframe$Trend

x <- seq(-2,2.5, by=0.01)
p1 <- qplot(x=x, y=f(x), ylab="Trend", geom="line") + theme_bw()
p2 <- qplot(x=x, y=Residuals, data=dframe, geom="jitter") + theme_bw()
p <- grid.arrange(p1, p2, nrow=2)
p
@
\begin{figure}
\begin{subfigure}[b]{.45\linewidth}
  \centering
  \includegraphics[width=\textwidth]{figure/fig-cleveland1}
  \caption{\small Data}
  \label{fig:clevelandsubfig1}
\end{subfigure}
\begin{subfigure}[b]{.45\linewidth}
  \centering
  \includegraphics[width=\textwidth]{figure/fig-cleveland2}
  \caption{\small Trend and Residuals}
  \label{fig:clevelandsubfig2}
\end{subfigure}
\caption{Describe the conditional variability of the points along the $x$ axis in (a). Is your description consistent with the residual plot in (b)?}
\label{fig:cleveland-figure}
\end{figure}
% <<trend-removal, include=FALSE, fig.height=4.5, fig.width=4.5>>=
% df <- df2 <- createSine(40, 1, sin, cos, f2prime=function(x) -sin(x))
% df2$y <- loess(df$y~df$x)$fitted
% df2$type <- "Loess Fit"
% df$type <- "Original Function"
% df <- rbind(df, df2)
% 
% ggplot(data=df,aes(x=x, y=y)) + geom_segment(aes(x=xstart, xend=xend, y=ystart, yend=yend)) + geom_line(aes(group=type, linetype=type)) + scale_linetype_discrete("") + theme_bw()  + theme(legend.position="none") + 
%   scale_x_continuous("", breaks=seq(0, 2*pi, by=pi/2), 
%                      labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi)))) + ylab("") 
% 
% p1 <- qplot(data=subset(df, type=="Loess Fit"), x=xstart, xend=xend, y=ystart-y, yend=yend-y, geom="segment", linetype=type)  + xlab("x")+ ylim(c(-1.5, 1.5)) + theme_bw()+ scale_linetype(guide="none") + 
%   scale_x_continuous("", breaks=seq(0, 2*pi, by=pi/2), 
%                      labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi)))) + ylab("Trend")
% 
% p2 <- qplot(data=subset(df, type=="Loess Fit"), x=x, y=y, geom="line", linetype=type) + xlab("x") + ylim(c(-1.5, 1.5)) + theme_bw() + scale_linetype(guide="none") +
%   scale_x_continuous("", breaks=seq(0, 2*pi, by=pi/2), 
%                      labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi)))) + ylab("Variability")
% 
% print(grid.arrange(p2, p1, nrow=2))
% @
% \begin{figure}[h!tbp]\centering
% 
% \begin{subfigure}[b]{.45\linewidth}
%   \centering
%   \includegraphics[width=\textwidth]{figure/fig-trend-removal1}
%   \caption{\small Original Data}
%   \label{fig:trendremovalFit}
% \end{subfigure}
% \begin{subfigure}[b]{.45\linewidth}
%   \centering
%   \includegraphics[width=\textwidth]{figure/fig-trend-removal2}
%   \caption{\small Trend and Variability}
%   \label{fig:trendremovalVariability}
% \end{subfigure}
% \caption{Separating the trend and the variability removes the Sine illusion. Figure \ref{fig:trendremovalFit} shows the fit line  compared to the original function (dashed), Figure \ref{fig:trendremovalVariability} shows the the underlying fitted trendline and the leftover variability in the vertical lines which now appear to be of the same size.}\label{fig:trendremoval}
% \end{figure}

From a cognitive perspective, separating out the trendline and the variance creates a barrier to understanding the data in its original form; as the original graph must be mentally re-constructed. Additionally, removing the trend requires an initial model, making any plots produced using that fit conditional on the assumptions necessary to obtain that model fit. In many situations, this may be undesireable. In particular, we typically view the data before fitting even a rudimentary model, and the sine illusion may influence even these initial modeling decisions.

\subsection{Transformation of the $X$-Axis}
Another approach to breaking the power of the sine illusion is to remove the changes in the slope of the overall trend line by transforming the $x$-axis such that the absolute value of the slope is constant. 
This will force the corresponding extant width to be constant. 


Let us assume that we can describe the relationship between variables $X$ and $Y$ by a model of the form 
\[
y = f(x) + \varepsilon,
\]
where $f$ is some underlying function (either due to prior knowledge or using a model fit). Further let us assume that the function $f$ is differentiable over the region of observed data.

% \newtext{This transformation assumes that we have an underlying function $f$ (either due to prior knowledge or using a model fit) which is differentiable over the region of observed data. If data $(x_i, y_i)_{i=1, ..., N}$ have been observed, then we assume we can model $y_i = f(x_i) + \epsilon_i$ and that $f^\prime(x_i)$ exists for all $i=1, ..., N$. }

%This transformation can be considered as a reparameterization of the $x$ axis in terms of the slope.
% The transformation is shown in Figure \ref{xtrans1}. An analysis of $T(x)$ is shown in appendix \ref{XtransAppendix}.

The idea of correcting for the illusion is to make all lines appear under the same slope, i.e. we want to find a transformation $T(x)$ of $x$, such that $f(T(x))$ is a  piece-wise linear function, where each piece has the same absolute slope. 
As the sine illusion depends on changing slope in the overall trend, by reparameterizing the $x$-axis in terms of the slope, the data will appear under a  constant slope, removing the illusion, while the $x$-axis shows the changing slope.

This approach results in the transformation shown in Equation \ref{eqn.xtrans} and is demonstrated in Figure \ref{fig:xtrans1}.
\begin{equation}\label{eqn.xtrans}
(f \circ T)(x) = x_0 + (x_K-x_0)\left(\int_{x_0}^x |f^\prime(z)| dz\right)/\left(\int_{x_0}^{x_K}|f^\prime(z)| dz\right)
\end{equation}

Derivation of eqn (\ref{eqn.xtrans}) is provided in appendix \ref{app.xtrans}.

<<xtransform, echo=FALSE, fig.width=4, fig.height=2, include=FALSE>>=
correctx <- function(z, fprime, a=0, b=2*pi, w=1) {
  # w = 1/(shrink+1)
  const <- integrate(function(x) abs(fprime(x)), a, b)$value
  trans <- sapply(z, function(i) integrate(function(x) abs(fprime(x)), a, i)$value*(b-a)/const + a)
  # alternatively to the rowMeans, you could report back  
  # trans*(1-w) + z*w
  trans*w + z*(1-w)
}
f <- sin
fprime <- cos
f2prime <- function(x) -sin(x)
dframe <- createSine(40 , len=1, f=f, fprime=fprime, f2prime=f2prime)
minor.axis.correction <- correctx(seq(0, 2*pi, pi/8), fprime)

dframe$xtrans <- correctx(dframe$x, fprime=fprime)

dots <- data.frame(x = rep(minor.axis.correction, times=1), y=rep(c(-2), each=length(minor.axis.correction)))

qplot(x=xtrans, xend=xtrans, y = ystart, yend=yend, colour=I("blue"), geom="segment", data=dframe) +
  geom_segment(aes(x = 0, xend=2*pi, y=0, yend=0), colour="black") + theme_bw() + coord_fixed(ratio=1) + xlab("x") + ylab("y")+ 
  scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), minor_breaks=minor.axis.correction,
                     labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi)))) + 
  geom_point(data=dots, aes(x=x, y=y), inherit.aes=FALSE) 

dots$x2 <- correctx(seq(0, 2*pi, pi/8), fprime, w=.5)

dframe$xtrans2 <- correctx(dframe$x, fprime=fprime, w=.5)

qplot(x=xtrans2, xend=xtrans2, y = ystart, yend=yend, colour=I("blue"), geom="segment", data=dframe) +
  geom_segment(aes(x = 0, xend=2*pi, y=0, yend=0), colour="black") +theme_bw() + coord_fixed(ratio=1) + 
  xlab("x") + ylab("y")+ 
  scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), minor_breaks=minor.axis.correction,
                     labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi)))) + 
  geom_point(data=dots, aes(x=x2, y=y), inherit.aes=FALSE) 

dots$x3 <- correctx(seq(0, 2*pi, pi/8), fprime, w=1/3)

dframe$xtrans3 <- correctx(dframe$x, fprime=fprime, w=1/3)

qplot(x=xtrans3, xend=xtrans3, y = ystart, yend=yend, colour=I("blue"), geom="segment", data=dframe) +
  geom_segment(aes(x = 0, xend=2*pi, y=0, yend=0), colour="black") +theme_bw() + coord_fixed(ratio=1) + 
  xlab("x") + ylab("y")+  
  scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), minor_breaks=minor.axis.correction,
                     labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi))))+ 
  geom_point(data=dots, aes(x=x3, y=y), inherit.aes=FALSE) 

dots$x4 <- correctx(seq(0, 2*pi, pi/8), fprime, w=1/4)

dframe$xtrans4 <- correctx(dframe$x, fprime=fprime, w=1/4)

qplot(x=xtrans4, xend=xtrans4, y = ystart, yend=yend, colour=I("blue"), geom="segment", data=dframe) +
  geom_segment(aes(x = 0, xend=2*pi, y=0, yend=0), colour="black") +theme_bw() + coord_fixed(ratio=1) + 
  xlab("x") + ylab("y") +
  scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), minor_breaks=minor.axis.correction,
                     labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi))))+ 
  geom_point(data=dots, aes(x=x4, y=y), inherit.aes=FALSE) 
@
\begin{figure}[h!tbp]\centering
\begin{subfigure}[b]{.48\linewidth}\centering
\includegraphics[keepaspectratio=TRUE,width=\linewidth]{figure/fig-xtransform1}
\caption[X axis transformation]{$X$ axis transformation based on eqn. (\ref{eqn.xtrans}), corresponding to weighting of $w=0$.}
\label{fig:xtrans1}
\end{subfigure}
\begin{subfigure}[b]{.48\linewidth}\centering
\includegraphics[keepaspectratio=TRUE,width=\linewidth]{figure/fig-xtransform2}
\caption[Weighted transformation]{Weighted Transformation, $w=1/2$ (based on eqn. (\ref{eqn.xtrans.weighted}))}
\label{fig:xtrans2}
\end{subfigure}

\begin{subfigure}[b]{.48\linewidth}\centering
\includegraphics[keepaspectratio=TRUE,width=\linewidth]{figure/fig-xtransform3}
\caption[Weighted transformation]{Weighted Transformation, $w=1/3$}
\label{fig:xtrans3}
\end{subfigure}
\begin{subfigure}[b]{.48\linewidth}\centering
\includegraphics[keepaspectratio=TRUE,width=\linewidth]{figure/fig-xtransform4}
\caption[Weighted transformation]{Weighted Transformation, $w=1/4$}
\label{fig:xtrans4}
\end{subfigure}
\caption[X axis transformations]{$X$ axis transformations. Dots at the bottom of the graph show the transformation's effect on equally spaced points along the $x$-axis. In (a), adjusting the $x$-spacing of the lines mitigates the sine illusion by changing the extant width so that it is uniform in $x$. (b) - (d) shrink the transformation in (a) towards successively more uniform spacings in $x$ while still breaking the effects of the illusion.}
\label{fig:xtrans}
\end{figure}
Note, that we only make use of the transformation $T$ in the form of $f \circ T$. This means that we do not need to explicitly calculate the transformation $T$, which in particularly would involve computing the inverse of $f$ and might be computationally very intensive.

While the transformation in equation \ref{eqn.xtrans} effectively removes the appearance of changing line length resulting from the sine illusion, in practice we can see that the illusion can be broken by a much less severe transformation of the $x$ values. 
Shrinking the transformation in Figure \ref{fig:xtrans1} towards the original $x$ values by a factor of $w \in (0,1)$ allows the effect of the illusion to be disrupted with a weaker transformation. Under the weaker transformation, the data more closely reflect the original function $f(x)$. We use the following equation for this: 

\begin{equation}\label{eqn.xtrans.weighted}
(f \circ T_w)(x) = (1-w) \cdot x + w \cdot (f \circ T)(x)
\end{equation}

Figures \ref{fig:xtrans2} - \ref{fig:xtrans4} show the effect of different shrinkage coefficients $w$. As $w$ decreases, the lines become more evenly spaced and the illusion begins to return. The dots at the bottom of each plot indicate evenly spaced x-axis points that have been transformed; as $w$ decreases, the dots become more evenly spaced. 

The extent to which this weighting holds varies with the aspect ratio of the chart and the shape of the function. It might also be influenced by the audience's experience with the sine illusion, resulting in very subjective choices of an
%, but merits further investigation, as it may be possible to find an 
``optimal weighting" for specific situations which minimizes distortion and maximizes the correspondence between inferences made from the data and inferences made using the visual display.
%\comment{I'm not sure we want to say it depends on the audience's experience - I suspect that people with experience are more likely to use a "when do I no longer see it" approach, rather than a "when do I see it approach", i.e. looking at the limit from 0->1 instead of the more naive approach of 1->0. We might want to do a short experiment involving "yes or no" tests instead of graduated approaches - say, 3 plots of x, 3 plots of y, 3 distractor plots for each subject. We could probably just mix this into the shiny experiment... }

%\FloatBarrier
%\clearpage
<<xtrans-example, echo=FALSE, include=FALSE, dependson='xtransform', fig.width=6, fig.height=6>>=
library(locfit)

datasub <- read.csv("data/Ozone/Ozone-subset.csv")
model <- locfit(data=datasub, Ozone~Tmax)
deriv <- locfit(data=datasub, Ozone~Tmax, deriv=1)

f <- function(x) predict(model, newdata=data.frame(Tmax=x))
fprime <- function(x) predict(deriv, newdata=data.frame(Tmax=x))

datasub$TmaxCorrect <- correctx(datasub$Tmax, fprime, a=45, b=95, w=1)
datasub$TmaxCorrect2 <- correctx(datasub$Tmax, fprime, a=45, b=95, w=1/2)


dots <- data.frame(Tmax=seq(45, 95, length=11), Ozone=0)
dots$TmaxCorrect <- correctx(dots$Tmax, fprime, a=45, b=95, w=1)
dots$TmaxCorrect2 <- correctx(dots$Tmax, fprime, a=45, b=95, w=1/2)

breaks <- data.frame(labels=as.character(seq(50, 90, 5)), breaks=seq(50, 90, 5))
breaks$breaks1 <- correctx(breaks$breaks, fprime, a=45, b=95, w=1)
breaks$breaks2 <- correctx(breaks$breaks, fprime, a=45, b=95, w=1/2)

nsite <- length(unique(datasub$SiteID))

qplot(data=datasub, x=Tmax, y=Ozone, geom="jitter", colour=I("grey30"), alpha=I(.5), 
      xlab="Temperature (F)", ylab="8-hour Average Ozone Concentration (ppm)") + 
  geom_line(aes(x=Tmax, y=fit), size=1.25, colour="steelblue") + theme_bw()+ 
  geom_point(data=dots, aes(x=Tmax))
qplot(data=datasub, x=TmaxCorrect, y=Ozone, geom="jitter", colour=I("grey20"), alpha=I(.5), 
      xlab="Temperature (F)", ylab="8-hour Average Ozone Concentration (ppm)") + 
  geom_line(aes(x=TmaxCorrect, y=fit), size=1.25, colour="steelblue") + theme_bw() + 
  geom_point(data=dots) + 
  scale_x_continuous(breaks=breaks$breaks1, minor_breaks=dots$TmaxCorrect, labels=breaks$labels) 
qplot(data=datasub, x=TmaxCorrect2, y=Ozone, geom="jitter", colour=I("grey20"), alpha=I(.5), 
      xlab="Temperature (F)", ylab="8-hour Average Ozone Concentration (ppm)") + 
  geom_line(aes(x=TmaxCorrect2, y=fit), size=1.25, colour="steelblue") + theme_bw() + 
  geom_point(data=dots) + 
  scale_x_continuous(breaks=breaks$breaks2, minor_breaks=dots$TmaxCorrect, labels=breaks$labels)

@

In the example of the Ozone data shown in Figure \ref{fig:exampleFull1}, we can base a transformation of the $x$-axis on a loess fit of ozone concentration in daily temperature. Loess is particularly convenient for this transformation, as it enforces continuity conditions including differentiability of the fitted function; software allows us to obtain fits of both the function values and their derivatives.
%the fitted $f^\prime(x)$ as well as $f(x)$. 
Figure \ref{fig:xtrans-example} shows the original data side-by-side with the transformed $x$-axis.
%
\begin{figure}[h!]\centering
\begin{subfigure}[b]{.48\linewidth}\centering
\includegraphics[keepaspectratio=TRUE,width=\linewidth]{figure/fig-xtrans-example1}
\caption{Original Data}\label{fig:xtrans-example-original}
\end{subfigure}
\begin{subfigure}[b]{.48\linewidth}\centering
\includegraphics[keepaspectratio=TRUE,width=\linewidth]{figure/fig-xtrans-example2}
\caption{Transformed $X$ Axis}\label{fig:xtrans-example-trans}
\end{subfigure}
\caption{Original data and data after x-transformation. The increasing variance is easier to see when $x$ has been transformed, because the slope is now uniform.\label{fig:xtrans-example}}
\end{figure}
Figure \ref{fig:xtrans-example} demonstrates not only the effect of transformation of the $x$-axis, but also that the transformation is not particularly misleading in this example.The granularity of the data in this example provides an implicit measure of the strength of the transformation along the $x$-axis and the transformation is also clearly evident in the labels along the $x$-axis. 
% While we typically prefer that our axis transformations are monotone, this transformation provides additional utility that a monotone transformation does not. \newdo{ the transformation is monotone - it only goes up and doesn't reverse the temperatures. it's even continuous, but it is not differentiable. }
% 
% \todo[inline]{add more explanation, etc here so that it's not orphaned.}
\subsection{Transformation in $Y$}
Understanding the geometry of the sine illusion leads to another approach to disrupting the conflict between the orthogonal width and the vertical length of the segment. 

All of our approaches in this section are based on a comparison of the orthogonal width to the vertical length of lines. 
Studies have shown \cite{XXX, YYY} that onlookers generally evaluate orthogonal width rather than vertical or horizontal widths of lines.
By adjusting the vertical width in such a way that the (perceived) orthogonal width displays the quantity of interest, we can match an onlooker's intuitive evaluation of a situation  with the data values we want to present.

% 

\begin{SCfigure}
\centering
% \includegraphics[width=0.3\linewidth]{images/linewidth}
\includegraphics[width=.35\linewidth]{figure/fig-geometry}
\caption{Sketch of line width assessments: The solid line shows vertical width, the dotted line shows  width orthogonal to the slope. \label{fig:linewidth}}
\end{SCfigure}

As Figure \ref{fig:linewidth} shows, orthogonal $w_o$ and vertical $w_v$ line widths are related -- the orthogonal line width depends on the angle under which the line is drawn. Mathematically, we have:
\begin{equation}\label{eqn.adjust}
w_o = w_v \cos \theta,
\end{equation}
where $\theta$ is the acute angle between the secant line and the vertical, that is, $\theta \in (-\pi, \pi]$. The relationship between $\theta$ and extant width for $y = \sin(x)$ can be seen in Figure\ref{fig:OrthogonalWidth}.

Previous work in \citet{schonlau:2003, marie:2013} used the adjustment in eqn.(\ref{eqn.adjust}) for a line with constant slope. We have to extend this approach to a functional form with varying slope. This is the approach taken in the next sections.

%Figure \ref{fig:linewidth} shows a more simplified illustration of $\theta$, the angle of the secant line to the vertical. 

\subsubsection{Trigonometry Method}\label{trig}



The approach that we take here is sketched out in figure \ref{fig:trig}: we evaluate the slope of function $f$ in position $x$, find an approximation of the extant width as $m = \ell \cos{\theta}$, where angle $\theta$ is determined by the slope of function $f$ in $x$, i.e.
%
<<trigmethodcartoon,echo=FALSE, include=FALSE, cache=FALSE>>=
f <- function(x) 2*sin(x)
fprime <- function(x) 2*cos(x)
f2prime <- function(x) -2*sin(x)
df <- createSine(40 , len=1, f=f, fprime=fprime, f2prime=f2prime)[5:16,]
a <- 9
dfsec <- getSecantSegment(df$x[a], df=df, f, fprime, f2prime)
dfslope <- data.frame(xstart=df$x[a]+.5, xend=df$x[a]-.9, ystart=fprime(df$x[a])*.5+df$y[a], yend=-.9*fprime(df$x[a])+df$y[a])
dfslope2 <- data.frame(xstart=df$x[a]+.5, xend=df$x[a]-.3, ystart=fprime(df$x[a])*.5+df$y[a]+.5, yend=-.3*fprime(df$x[a])+df$y[a]+.5)
ftsize <- 4

df <- createSine(40 , len=1, f=f, fprime=fprime, f2prime=f2prime)[5:16,]

a <- 9
df.real <- data.frame(x=seq(df$x[1], df$x[12], by=.001))
df.real$y <- f(df.real$x)
df.real$yupper <- fprime(df$x[a])*(df.real$x-df$x[a])+f(df$x[a])+.5
df.real$yupper[which(abs(df.real$x-2)>.5)] <- NA
df.real$ylower <- fprime(df$x[a])*(df.real$x-df$x[a])+f(df$x[a])-.5
df.real$ylower[which(abs(df.real$x-2)>.5)] <- NA
df.real$sec <- -1/fprime(df$x[a])*(df.real$x-df$x[a])+f(df$x[a])
df.real$sec[which(abs(df.real$x-2)>.5)] <- NA
dfslope <- data.frame(xstart=df$x[a]+.5, xend=df$x[a]-.9, ystart=fprime(df$x[a])*.5+df$y[a], yend=-.9*fprime(df$x[a])+df$y[a])
dfslope2 <- data.frame(xstart=df$x[a]+.5, xend=df$x[a]-.3, ystart=fprime(df$x[a])*.5+df$y[a]+.5, yend=-.3*fprime(df$x[a])+df$y[a]+.5)

cairo_pdf("./figure/fig-trigmethodcartoon.pdf", width=5, height=5)
qplot(data=df.real, x=x, y=y, geom="line") +
  theme(panel.grid.major=element_blank(), 
#      panel.background = element_rect(fill = "white", colour = "black"),
      panel.background=element_blank(),  
      panel.grid.minor=element_blank(),
      axis.title = element_blank(), axis.ticks = element_blank(), 
      axis.text = element_blank()) +  
  coord_equal(ratio=1) +
  geom_line(data=df.real,aes(y=yupper), linetype=3) + 
  geom_line(data=df.real,aes(y=ylower), linetype=4) + 
  geom_segment(data=df, aes(x=xstart, y=ystart, xend=xend, yend=yend), colour="grey50") + 
  geom_segment(data=df[a,], aes(x=xstart, y=ystart, xend=xend, yend=yend), colour="black", size=1.5)+
  geom_line(data=df.real, aes(y=sec)) + 
  geom_text(data=dfslope, aes(x=xend+.1, y=yend+.05, label="slope: paste(f, \"'\", (x))"), parse=TRUE, hjust=0, vjust=1) +
  geom_text(aes(x=mean(c(dfsec$sec.xstart, df$xend[a], df$x[a], df$x[a]))+.04, 
                y=mean(c(dfsec$sec.ystart, df$yend[a], df$y[a], df$y[a]))+.04 
                ), label="theta", parse=TRUE, size=ftsize+1, data=data.frame()) +
  geom_text(aes(x=df.real$x[which.min(df.real$sec)], y=min(df.real$sec, na.rm=TRUE)-.05), 
                label="slope: paste(-1/f, \"'\", (x))", parse=TRUE, hjust=.75, vjust=1, data=data.frame()) +
  geom_text(data=df[a,], aes(x=.5*xend-.05 + .5*x, y=.5*yend+.5*y, label="paste(frac(\u2113, 2))"), size=ftsize+1, face="bold", parse=TRUE) +
  geom_text(aes(x=.5*dfsec$sec.xstart+ .5*dfsec$x +.1 , y=.5*dfsec$sec.ystart+.5*dfsec$y-0.04), label="paste(frac(m, 2))", parse=TRUE, face="plain", data=data.frame()) + 
  xlab("x") + ylab("y") +
  geom_segment(data=dfslope, aes(x=xstart, y=ystart, xend=xend, yend=yend), linetype=2) + theme(axis.title=element_blank(), axis.text=element_blank(), axis.ticks=element_blank(), axis.line=element_blank(), panel.grid=element_blank())
dev.off()
@
\begin{SCfigure}
\centering
\includegraphics[keepaspectratio=TRUE,width=.5\linewidth]{figure/fig-trigmethodcartoon}
\caption[Geometry of the trig correction approach]{Geometry of the trigonometry correction approach. $\ell$ denotes the length of the entire vertical segment, hence, $\ell/2$ is the length of the portion above the mean function.
\label{fig:trig}}
\end{SCfigure}
% \todo[inline]{
% %The picture is wrong here, but I can't figure out how the extant width in the trig method was actually calculated. It seems like it should be like this, but either we're assuming a right angle and shouldn't be (use law of cosines instead) or I'm being an idiot, but the picture looks exactly like that for linear fix, and I know it isn't the same method!
% For the time being, I'm using an annotated version of the linear approximation picture, but we need to add the math in to justify them as the same correction (and also need to fix the aspect ratio correction in the functions)}
% 
% Our goal is to make the segment $m$ appear as long as the segment $\ell$. As the angle $\theta$ is determined by the slope of the tangent line, that is, 
$$\tan \theta = \left|f^\prime(x)\right|.$$ 
Solving for $\theta$ leaves us with a ratio of orthogonal and vertical width of 
$$\left[\cos(\atan{\left|f^\prime(x)\right|})\right]^{-1} = \ell/m.$$ 

That is, we have to scale $\ell$ by a factor of 
$\left[\cos(\atan{\left|f^\prime(x)\right|})\right]^{-1}$
to make the extant width $m$ appear as long as $\ell$ in the original graph: 
% We first multiply the vertical width by a factor of $1/\cos\theta$, where $\theta$ is the angle under which the line is drawn. This angle is given by the slope of the function, mathematically we know that in position $x$ the angle $\theta(x)$ of function $f(x)$ is given as:
% \[
% \tan \theta (x) = f^\prime (x).
% \]
% We only distinguish the size, not the sign of the angle, which gives us an overall correction factor for the line width in vertical direction of 
\begin{equation}\label{trigCorrection}
\ell_{\text{new}} = \ell\cdot\left(\cos\left[\atan{\left| f^\prime (x) \right|}\right]\right)^{-1} = \ell \cdot \sqrt{1 + |f^\prime(x)^2|}
\end{equation}
The last equality follows directly when using $y = \atan{|f^\prime(x|}$ in the formula below:
\begin{eqnarray*}
\cos(y) = 1/\text{sec}(y) = 1/\sqrt{1+ \tan^2 y}.\\
\end{eqnarray*}

<<trigFix, dependson='data', echo=FALSE, include=FALSE, fig.width=4, fig.height=3>>=
dframe <- createSine(40,1, f=f, fprime=fprime, f2prime=f2prime)
qplot(x=x, xend=xend, y = f(x) -ell/2, yend=f(x) +ell/2, geom="segment", data=dframe) +
 theme_bw() + coord_fixed(ratio=1) + 
  xlab("x") + ylab("y") +
  scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), minor_breaks=minor.axis.correction,
                     labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi))))

qplot(x=x, xend=xend, y = f(x) -ellx/2, yend=f(x) +ellx/2, geom="segment", data=dframe) +
 theme_bw() + coord_fixed(ratio=1) + 
  xlab("x") + ylab("y") +
  scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), minor_breaks=minor.axis.correction,
                     labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi))))


qplot(x=x, xend=xend, y = f(x) -ellx2/2, yend=f(x) +ellx2/2, geom="segment", data=dframe) +
  theme(#panel.grid.major=element_blank(), 
#       panel.grid.minor=element_blank(), 
    panel.background=element_blank(),
       axis.title = element_blank()
#    , axis.ticks = element_blank(), 
#       axis.text = element_blank()
    ) + 
  coord_equal(ratio=1)

@
\begin{figure}[h!btp]
\begin{subfigure}[b]{.48\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-trigFix1}
\caption{Uncorrected}
\end{subfigure}
\begin{subfigure}[b]{.48\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-trigFix2}
\caption{Trigonometric correction}
\end{subfigure}
\caption[Demonstration of Trig Correction Fix]{Fix of the sine illusion by using the factor of $1/\cos\left(\atan{|\cos(x)|}\right)$ to adjust the vertical extent of the lines.}
\label{fig:trigFix} 
\end{figure}

The correction is shown in Figure \ref{fig:trigFix}. 
The assumption underlying this correction is the existence of a differentiable function $f$ describing the relationship between $X$ and $Y$,
 as we the correction is based on the slope of the secant line given by $-1/f^\prime(x)$.

\comment{The correction factor seems to over-correct. Is this just something that happens to the trained eye? We might need people to test for it.\\ I agree, because it looks a bit overcorrected to me as well.}

\subsubsection{A General Correction Method}
The idea for the general correction method is sketched out in figure \ref{fig:GeneralCorrection}. Based on function $f$ that describes the overall trend of the relationship between $X$ and $Y$ we want to first want to find the perceived width, and then correct the vertical width accordingly to match with the audience's expectation.

\begin{SCfigure}
\centering
\includegraphics[keepaspectratio=TRUE,width=.4\linewidth]{figure/fig-generalcorrectioncartoon3}
\caption[General correction approach]{ General correction approach. This approach may require numerical optimization to obtain exact solutions for $(x_u, y_u)$ and $(x_l, y_l)$.}\label{fig:GeneralCorrection}
\end{SCfigure}

The orthogonal width is given as the line segment between endpoints $(x_u, f_u(x_u))$ and $(x_\ell, f_\ell(x_\ell))$, where $f_\ell$ and $f_u$ denote the vertical shifts of function $f$ by $-\ell/2$ and $\ell/2$, respectively.
These endpoints are determined as the intersection of the line  orthogonal to the tangent line in $(x, f(x))$ and the graphs resulting from vertical shifts of $f$ by $\pm \ell/2$.

The function describing the orthogonal line through $(x_o, f(x_o))$ is given in point-vector form as 
\[
{x_o \choose f(x_o)} + \lambda {f^\prime(x_o) \choose 1}, 
\]
for any real-valued $\lambda$.
The advantage of using point vector form is that it allows us to solve for parameter $\lambda$ easily, which gives us easy access to the extant (half-)widths, which are given as 
\[
|\lambda| \sqrt{1 + f^\prime(x_o)^2}.
\]
This expression describes the quantity that we perceive rather than the quantity that we want to display ($\ell/2$), which leads us to a general expression of the correction factor as
\begin{eqnarray*}
 \ell/2 \cdot \left(|\lambda| \sqrt{1 + f^\prime(x_o)^2}\right)^{-1}.
\end{eqnarray*}
Note that this yields in general two solutions: one for positive, one for negative lambda corresponding to upper and lower (half-)extant width.

In order to get  actual numeric values for $\lambda$, we need to find end points of the extant line width as solutions of intersecting the orthogonal line and  the graphs of $f_u$ and $f_\ell$. We find these end points  as solutions in $x$ and $\lambda$ of the system of equations:
\begin{eqnarray}\label{eqn.general}
 x - x_o &=& \lambda f^\prime(x_o)\\ \label{eqn.general.2}
 f(x) - f(x_o) &=& -\lambda \pm \ell/2
\end{eqnarray}


Note that  the above system of equations involves function values $f(x)$, which implies that solving this system  requires numerical optimization for any but the most simple functions $f$.

In the following two sections we are going to use Taylor approximations of first and second order to find approximate solutions to the end points.


% 
% As shown in Figure \ref{GeneralCorrection}, another method for adjusting the vertical length to ensure constant extant width is to solve the systems of equations\\
% \begin{minipage}[t]{.495\linewidth}
% \begin{align*}
% y_u & = f(x_u) + \ell/2\\
% y_u & = \left(-1/f^\prime(x_0)\right) x_u + f(x_0) + x_0/f^\prime(x_0)
% \end{align*}\vspace{8pt}
% \end{minipage}
% \begin{minipage}[t]{.495\linewidth}
% \begin{align*}
% y_l & = f(x_l) - \ell/2\\
% y_l & = \left(-1/f^\prime(x_0)\right) x_l + f(x_0) + x_0/f^\prime(x_0)
% \end{align*}
% \end{minipage}\\
% to obtain  $(x_u,y_u)$, the point at which the secant line intersects $f(x) + \ell/2$, and $(x_l, y_l)$, thet point at which the secant line intersects $f(x) -\ell/2$. With these two endpoints, we can correct separately for the top and bottom portions of the line, as the extant width is not symmetric when reflected across the original function f(x). 


<<generalcorrectioncartoon,echo=FALSE, include=FALSE, fig.width=4, fig.height=4>>=
f <- function(x) 2*sin(x)
fprime <- function(x) 2*cos(x)
f2prime <- function(x) -2*sin(x)
df <- createSine(40 , len=1, f=f, fprime=fprime, f2prime=f2prime)[5:16,]

a <- 9
df.real <- data.frame(x=seq(df$x[1], df$x[12], by=.001))
df.real$y <- f(df.real$x)
df.real$yupper <- df.real$y+.5
df.real$ylower <- df.real$y-.5
dfsec <- getSecantSegment(df$x[a], df, f, fprime, f2prime)
dfslope <- data.frame(xstart=df$x[a]+.5, xend=df$x[a]-.9, ystart=fprime(df$x[a])*.5+df$y[a], yend=-.9*fprime(df$x[a])+df$y[a])
dfslope2 <- data.frame(xstart=df$x[a]+.5, xend=df$x[a]-.3, ystart=fprime(df$x[a])*.5+df$y[a]+.5, yend=-.3*fprime(df$x[a])+df$y[a]+.5)
qplot(data=df.real, x=x, y=y, geom="line") + 
  theme(panel.grid.major=element_blank(), 
        panel.grid.minor=element_blank(), panel.background=element_blank(),
        axis.title = element_blank(), axis.ticks = element_blank(), 
        axis.text = element_blank()) +  
  geom_line(data=df.real,aes(y=yupper), linetype=3) + 
  geom_line(data=df.real,aes(y=ylower), linetype=4) + 
  geom_segment(data=df, aes(x=xstart, y=ystart, xend=xend, yend=yend), colour="grey50") + 
  geom_segment(data=df[a,], aes(x=xstart, y=ystart, xend=xend, yend=yend), colour="black", size=1.5)+
  geom_segment(data=dfsec, aes(x=sec.xstart, xend=sec.xend, y=sec.ystart, yend=sec.yend)) + 
  geom_point(data=dfsec, aes(x=sec.xstart, y=sec.ystart)) + geom_point(data=dfsec, aes(x=sec.xend, y=sec.yend)) +
  geom_segment(data=dfslope, aes(x=xstart, y=ystart, xend=xend, yend=yend), linetype=2) + 
  geom_text(data=dfsec, aes(x=sec.xstart, y=sec.ystart+.05, label="paste(group('(',list(x[u],y[u]),')'))"), parse=TRUE, hjust=0) + 
  geom_text(data=dfsec, aes(x=sec.xend, y=sec.yend-.08, label="paste(group('(',list(x[l],y[l]),')'))"), parse=TRUE, hjust=.9) +   
  geom_text(data=dfslope, aes(x=xend+.1, y=yend+.1, label="slope: paste(f, \"'\", (x))"), parse=TRUE, hjust=.75, vjust=1) +
  coord_equal(ratio=1) + theme(axis.title=element_blank(), axis.text=element_blank(), axis.ticks=element_blank(), axis.line=element_blank(), panel.grid=element_blank(), plot.margin = unit(c(-1,-1,-2,-2), "lines")) 

df <- createSine(40 , len=1, f=f, fprime=fprime, f2prime=f2prime)[5:16,]

a <- 9
df.real <- data.frame(x=seq(df$x[1], df$x[12], by=.001))
df.real$y <- f(df.real$x)
df.real$yupper <- fprime(df$x[a])*(df.real$x-df$x[a])+f(df$x[a])+.5
df.real$yupper[which(abs(df.real$x-2)>.5)] <- NA
df.real$ylower <- fprime(df$x[a])*(df.real$x-df$x[a])+f(df$x[a])-.5
df.real$ylower[which(abs(df.real$x-2)>.5)] <- NA
df.real$sec <- -1/fprime(df$x[a])*(df.real$x-df$x[a])+f(df$x[a])
df.real$sec[which(abs(df.real$x-2)>.5)] <- NA
df.real$sec[which(df.real$sec>df.real$yupper | df.real$sec<df.real$ylower)] <- NA
dfslope <- data.frame(xstart=df$x[a]+.5, xend=df$x[a]-.9, ystart=fprime(df$x[a])*.5+df$y[a], yend=-.9*fprime(df$x[a])+df$y[a])
dfslope2 <- data.frame(xstart=df$x[a]+.5, xend=df$x[a]-.3, ystart=fprime(df$x[a])*.5+df$y[a]+.5, yend=-.3*fprime(df$x[a])+df$y[a]+.5)
qplot(data=df.real, x=x, y=y, geom="line")+
  theme(panel.grid.major=element_blank(), 
        panel.grid.minor=element_blank(), panel.background=element_blank(),
        axis.title = element_blank(), axis.ticks = element_blank(), 
        axis.text = element_blank(),
        plot.margin = unit(rep(0,4), "lines")) +
  coord_equal(ratio=1) +
  geom_line(data=df.real,aes(y=yupper), linetype=3) + 
  geom_line(data=df.real,aes(y=ylower), linetype=4) + 
  geom_segment(data=df, aes(x=xstart, y=ystart, xend=xend, yend=yend), colour="grey50") + 
  geom_segment(data=df[a,], aes(x=xstart, y=ystart, xend=xend, yend=yend), colour="black", size=1.5)+
  geom_line(data=df.real, aes(y=sec)) + 
  geom_point(data=df.real[which.min(df.real$sec),], aes(x=x, y=sec), size=2) + 
  geom_point(data=df.real[which.max(df.real$sec),], aes(x=x, y=sec), size=2) +
  geom_segment(data=dfslope, aes(x=xstart, y=ystart, xend=xend, yend=yend), linetype=2) + 
  geom_text(data=df.real[which.min(df.real$sec),], aes(x=x, y=sec-0.08, label="paste(group('(',list(x[l],y[l]),')'))"), 
            parse=TRUE, hjust=1, vjust=.25) + 
  geom_text(data=df.real[which.max(df.real$sec),], aes(x=x-.05, y=sec+.05, label="paste(group('(',list(x[u],y[u]),')'))"), 
            parse=TRUE, hjust=0, vjust=.25)  + 
  theme(axis.title=element_blank(), axis.text=element_blank(), axis.ticks=element_blank(), axis.line=element_blank(), panel.grid=element_blank())


df <- createSine(40 , len=1, f=f, fprime=fprime, f2prime=f2prime)[5:16,]

a <- 9
df.real <- data.frame(x=seq(df$x[1], df$x[12], by=.001))
df.real$y <- f(df.real$x)
df.real$yupper <- .5*f2prime(df$x[a])*(df.real$x-df$x[a])^2 + fprime(df$x[a])*(df.real$x-df$x[a])+f(df$x[a])+.5
df.real$yupper[which(abs(df.real$x-2)>.5)] <- NA
df.real$ylower <- .5*f2prime(df$x[a])*(df.real$x-df$x[a])^2 + fprime(df$x[a])*(df.real$x-df$x[a])+f(df$x[a])-.5
df.real$ylower[which(abs(df.real$x-2)>.5)] <- NA
df.real$sec <- -1/fprime(df$x[a])*(df.real$x-df$x[a])+f(df$x[a])
df.real$sec[which(abs(df.real$x-2)>.5)] <- NA
df.real$sec[which(df.real$sec>df.real$yupper | df.real$sec<df.real$ylower)] <- NA
dfslope <- data.frame(xstart=df$x[a]+.5, xend=df$x[a]-.9, ystart=fprime(df$x[a])*.5+df$y[a], yend=-.9*fprime(df$x[a])+df$y[a])
dfslope2 <- data.frame(xstart=df$x[a]+.5, xend=df$x[a]-.3, ystart=fprime(df$x[a])*.5+df$y[a]+.5, yend=-.3*fprime(df$x[a])+df$y[a]+.5)
qplot(data=df.real, x=x, y=y, geom="line") + 
  theme(panel.grid.major=element_blank(), 
        panel.grid.minor=element_blank(), panel.background=element_blank(),
        axis.title = element_blank(), axis.ticks = element_blank(), 
        axis.text = element_blank(),
        plot.margin = unit(rep(0,4), "lines")) +  
  coord_equal(ratio=1) +
  geom_line(data=df.real,aes(y=yupper), linetype=3) + 
  geom_line(data=df.real,aes(y=ylower), linetype=4) + 
  geom_segment(data=df, aes(x=xstart, y=ystart, xend=xend, yend=yend), colour="grey50") + 
  geom_segment(data=df[a,], aes(x=xstart, y=ystart, xend=xend, yend=yend), colour="black", size=1.5)+
  geom_line(data=df.real, aes(y=sec)) + 
  geom_point(data=df.real[which.min(df.real$sec),], aes(x=x, y=sec), size=2) + 
  geom_point(data=df.real[which.max(df.real$sec),], aes(x=x, y=sec), size=2) +
  geom_segment(data=dfslope, aes(x=xstart, y=ystart, xend=xend, yend=yend), linetype=2) + 
  geom_text(data=df.real[which.min(df.real$sec),], aes(x=x, y=sec-0.08, label="paste(group('(',list(x[l],y[l]),')'))"), 
            parse=TRUE, hjust=1, vjust=.25) + 
  geom_text(data=df.real[which.max(df.real$sec),], aes(x=x-.05, y=sec+.05, label="paste(group('(',list(x[u],y[u]),')'))"), 
            parse=TRUE, hjust=0, vjust=.25)  + 
  theme(axis.title=element_blank(), axis.text=element_blank(), axis.ticks=element_blank(), axis.line=element_blank(), panel.grid=element_blank())
@


\begin{figure}[h!]\centering
\begin{subfigure}[t]{0.495\textwidth}\centering
\includegraphics[keepaspectratio=TRUE,width=0.9\textwidth]{figure/fig-generalcorrectioncartoon2}
\caption{Linear Approximation}\label{fig:linear-GeneralCorrection}
\end{subfigure}
\begin{subfigure}[t]{0.495\textwidth}\centering
\includegraphics[keepaspectratio=TRUE,width=0.9\textwidth]{figure/fig-generalcorrectioncartoon3}
\caption{Quadratic Approximation}\label{fig:quadratic-GeneralCorrection}
\end{subfigure}
\caption[Methods based on Approximations to f(x)]{(a) uses a first-order taylor series approximation to $f(x)$ and (b) uses a second-order taylor series approximation to $f(x)$. The intersection of the function $f(x) \pm \ell/2$ and the secant line,  $(x_u, y_u), (x_l, y_l)$ must be obtained to determine the necessary correction factor.}\label{fig:linear.quadratic} 
\end{figure}

\paragraph{Linear Approximation to $f(x)$}\hfill\newline
A comparison of the sketches for the linear approach (in Fig. \ref{fig:linear-GeneralCorrection}) and the trigonometric approach (in Fig. \ref{fig:trig}) shows that they are the same. They do, indeed, lead to the same correction factor.
% 
% Using a linear approximation of $f(x)$ in value $x_0$, i.e.  
%  $f(x) \approx f(x_0) + f^\prime(x_0)(x-x_0)$, changes equation \ref{eqn.general.2}  to
%  \begin{eqnarray*}
%    f^\prime(x_0)(x-x_0) = -\lambda \pm \ell/2,
%  \end{eqnarray*}
% which makes the system linear, and allows a  straightforward solution, and leads to a correction factor of:  
% 
% % \begin{align*}
% % y & = f(x_0) + f^\prime(x_0)(x-x_0) \pm \ell/2\\
% % y & = \left(-1/f^\prime(x_0)\right) x + f(x_0) + x_0/f^\prime(x_0)
% % \end{align*}
% % \newdo{we need the steps in between, too - right now the solution is just a statement, we need an explanation.}
% 
% 
% % Figure \ref{linear-GeneralCorrection} shows the linear approximation to $f(x) \pm \ell/2$ and the secant line. Solving the system of equations provides endpoints $(x_l, y_l)$ and $(x_u, y_u)$ which can then be used to compute the extant width of the line connecting $(x_l, y_l)$ and $(x_u, y_u)$. We then scale the vertical line length so that the extant width is equal to the original value of $\ell/2$. This correction factor is 
% \begin{equation}\label{LinearApprox}
% \ell_{new} = \ell \cdot \sqrt{1 + \left(f^\prime(x)\right)^2}
% \end{equation}
% 
% 
% %= (\atan{f^\prime(x))}^\prime/f^{\prime\prime}(x)
% 
% 
% Note that while this solution looks different from the trigonometric approach, they are actually the same, since
% \[
% \cos (\atan{|f^\prime(x)}) = \sqrt{1 + |f^\prime(x)^2|}.
% \]
% This follows directly for $y = \atan{|f^\prime(x|}$ in the formula below:
% \begin{eqnarray*}
% \cos(y) = 1/sec(y) = 1/\sqrt{1+ \tan^2 y}.\\
% \end{eqnarray*}

The asymmetric nature of the distortion suggests that we may want to use a second-order taylor polynomial approximation to $f(x)$ to account for the asymmetry in the extant widths on either side of the center trendline.

\paragraph{Quadratic Approximation to $f(x)$}\hfill\newline
%
Using the approximation $f(x) \approx f(x_0) + f^\prime(x_0)(x-x_0) + 1/2 f^{\prime\prime}(x_0)(x-x_0)^2$, the system of equations~\ref{eqn.general} and~\ref{eqn.general.2}  simplifies to the following  quadratic equation in $\lambda$:
\begin{eqnarray*}
f^{\prime\prime}(x_0)  f^\prime(x_0)^2 \lambda^2  + 2(f^\prime(x_0)^2 + 1) \lambda  \pm \ell = 0,
\end{eqnarray*}
% Note that for values of $x$ with $f^\prime(x) = 0$ or  $f^{\prime\prime}(x)$ the equation simplifies: for local minima or maxima, i.e. $f^\prime(x) = 0$, the extant width coincides with the vertical width, so no correction is needed. In an inflection point, i.e. $f^{\prime\prime}(x) = 0$, the quadratic correction factor simplifies to the solution of the linear approximation and is given as $\sqrt{1 + f^\prime(x_0)^2}$.
% 
% For all other cases, we have the following set of solutions:
% 
% which leads us to solutions for $\lambda$ as
% % \[
% % \lambda_{1/2} = \left(  f^{\prime\prime}(x_0)  f^\prime(x_0)^2 \right)^{-1} \left( -(f^\prime(x_0)^2 + 1) + \sqrt{ (f^\prime(x_0)^2 + 1)^2 -  f^{\prime\prime}(x_0)  f^\prime(x_0)^2 \cdot (\pm \ell)} \right).
% % \]
% % We can reduce this further to 
% \begin{equation}
% \lambda_{1/2} = \pm 2 \ell \cdot \left( \sqrt{ (f^\prime(x_0)^2 + 1)^2 -  f^{\prime\prime}(x_0)  f^\prime(x_0)^2 \cdot (\pm \ell)} + (f^\prime(x_0)^2 + 1) \right)^{-1}
% \end{equation}
which leads us to corrections for the half lengths as (see appendix \ref{app.quadratic} for details):
\begin{eqnarray*}\label{eqn.quadratic}
\ell_{\text{new}_1} &=& 1 /2 \cdot  \left(1 + f^\prime(x_0)^2 + \sqrt{ \left(1 + f^\prime(x_0)^2\right)^2 +  f^{\prime\prime}(x_0) f^\prime(x_0)^2\cdot  \ell_{\text{old}}}\right) \cdot \left(\sqrt{1 + f^\prime(x_0)^2}\right)^{-1} \\
\ell_{\text{new}_2} &=& 1 /2 \cdot  \left(-(1 + f^\prime(x_0)^2) + \sqrt{ \left(1 + f^\prime(x_0)^2\right)^2 -  f^{\prime\prime}(x_0) f^\prime(x_0)^2\cdot  \ell_{\text{old}}}\right) \cdot \left(\sqrt{1 + f^\prime(x_0)^2}\right)^{-1} \\
\end{eqnarray*}

\begin{figure}[h!btp]
\begin{subfigure}[h]{.495\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-trigFix1}
\caption{Uncorrected}
\end{subfigure}
\begin{subfigure}[h]{.495\linewidth}\centering
<<CtsAdjustedResults,echo=FALSE, dependson='CtsQuadratic', fig.width=4, fig.height=3>>=
dframe <- createSine(n = 40, len = 1, f=f, fprime=fprime, f2prime=f2prime) 
qplot(x=x, xend=x, y=y+ellx4.u, yend=y-ellx4.l, geom="segment", data=dframe, linetype=I(1)) +   
 theme_bw() + coord_fixed(ratio=1) + 
  xlab("x") + ylab("y") +
  scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), minor_breaks=minor.axis.correction,
                     labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi))))
@
\caption{Quadratic approximation based on eqn (\ref{eqn.quadratic}).}
\end{subfigure}
\caption[Quadratic Approximation]{
In the quadratic approximation top and bottom segments of the vertical lines are adjusted separately.
}
\label{fig:GeneralQuadraticCorrection} 
\end{figure}

Adjusting the top and bottom segments of the vertical lines separately so that the extant width is constant breaks the illusion, but slightly distorts the sinusoidal shape of the peaks.

Figure \ref{fig:GeneralQuadraticCorrection} shows the correction factor based on a quadratic approximation compared to the untransformed data. 


%As shown in Figure \ref{quadratic-GeneralCorrection}, the solution of this equation provides endpoints $(x_l, y_l)$ and $(x_u, y_u)$ which can then be used to compute the extant width of each half-segment $m$. 

Unlike the linear solution, the half-segments here are not necessarily of the same length, and thus there are separate correction factors for each half-segment. 
%The correction factors are $(\ell/2)/(m_u)$ and $(\ell/2)/(m_l)$ respectively. 
<<CtsQuadratic, echo=FALSE, include=FALSE>>=
f <- function(x) 2*sin(x)
fprime <- function(x) 2*cos(x)
f2prime <- function(x) -2*sin(x)

suppressMessages(library(ggplot2))
dframe <- createSine(n = 40, len = 1, f=f, fprime=fprime, f2prime=f2prime)
dframe$type <- "Data"
dframe.real <- createSine(n = 4000, len = 1, f=f, fprime=fprime, f2prime=f2prime)
secantlines <- getSecantSegment(dframe.real$x, dframe, f, fprime, f2prime)
# secantlines2 <- getAdjLength(secantlines)

dframe2 <- secantlines
names(dframe2) <- c("x", "y", "deriv", "xstart", "xend", "ystart", "yend", "ell", "ellp", "ellm", "type", "a")

library(plyr)
dframe2 <- rbind.fill(dframe, dframe2)
names(secantlines)[9:10] <- c("Bottom.Segment", "Top.Segment")

library(reshape2)
secantlines.long <- melt(secantlines, measure.vars=c("Bottom.Segment", "Top.Segment"),  variable.name="Line", value.name="len")
names(secantlines.long)[11:12] <- c("Line", "len")
secantlines.long <- subset(secantlines.long, abs(x-pi)<pi)
cairo_pdf("figure/fig-wtf.pdf", width=8, height=4)
ggplot(aes(x=x, y=len, linetype=Line), data=secantlines.long) + geom_line()+
  scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), 
                     labels=c("0", expression(paste(pi,"/2")), 
                              expression(pi), 
                              expression(paste("3",pi, "/2")), 
                              expression(paste("2",pi)))) + 
  ylab(expression(frac('\u2113', 2))) +
  theme_bw() + theme(legend.position="bottom", axis.title.y=element_text(angle=0)) + scale_linetype_discrete("Adjusted \u2113/2")
dev.off()
@
\begin{figure}[h!tbp]\centering
\includegraphics[keepaspectratio=TRUE, width=.8\linewidth]{figure/fig-wtf}
\caption{Extant Half-segment Length. The secant  line segments are not symmetrical around the center line, so symmetric correction as employed in Figure \ref{fig:linear-GeneralCorrection} leads to simultaneous over- and under-correcting.}\label{fig:HalfSegLength}
\end{figure}

\subsection{Mathematical Properties of Transformation}
\todo[inline]{Add pictures comparing the 3 transformations to the untransformed data under both normal and extreme conditions.}
\todo[inline]{Discussion: Hammock/Trig/linear breaks first,  quadratic breaks after, full optimization breaks eventually}
As with the trigonometry correction, the linear adjustment is prone to the same overcorrection distortion shown in Figure \ref{fig:linearFixOvercorrect}.

\begin{figure}[h!tbp]
\centering
<<linearFixOvercorrect, dependson='data', echo=FALSE, include=FALSE>>=
g <- function(x) 5*sin(x)
gprime <- function(x) 5*cos(x)
g2prime <- function(x) -5*sin(x)
dframe <- createSine(100, len=5, f=g, fprime=gprime, f2prime=g2prime)
ar <- 1
qplot(x=x, xend=xend, y = g(x) -ell/2, yend=g(x) +ell/2, geom="segment", data=dframe) +
  theme(panel.grid.major=element_blank(), 
       panel.grid.minor=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank()) + coord_equal(ratio=ar)

qplot(x=x, xend=xend, y = g(x) -ellx/2, yend=g(x) +ellx/2, geom="segment", data=dframe) +
  theme(panel.grid.major=element_blank(), 
       panel.grid.minor=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank()) + coord_equal(ratio=ar)

qplot(x=x, xend=xend, y = g(x) -ellx2/2, yend=g(x) +ellx2/2, geom="segment", data=dframe) +
  theme(panel.grid.major=element_blank(), panel.background = element_rect(fill = "white", 
                colour = "black"),
       panel.grid.minor=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank()) + coord_equal(ratio=ar)
@

\begin{subfigure}[b]{.3\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-linearFixOvercorrect1}
\caption{$\ell=5$, Uncorrected}
\end{subfigure}
\begin{subfigure}[b]{.3\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-linearFixOvercorrect2}
\caption{Corrected by Eqn. \ref{trigCorrection}}
\end{subfigure}
\begin{subfigure}[b]{.3\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-linearFixOvercorrect3}
\caption{Corrected by Eqn \ref{LinearApprox}}
\end{subfigure}
\caption{The ratio of the length of the line to amplitude of the function needs to be included in the correction. Here, the amplitude is still 1, but the length of the line is 5. The correction factor leads to a massive over correction that makes the function almost unrecognizable. The plot on the left is uncorrected, the plot on the right is `corrected'.}\label{fig:linearFixOvercorrect} 
\end{figure}

\section{Transformation in Practice}

Some modifications are necessary to implement the correction factor in a realistic situation in which it might not be practical for the aspect ratio of the graph to be fixed at 1. As in \todo{Cite Marie's paper}, the correction factor necessary to remove the illusion depends on the aspect ratio of the graphs. Figure \ref{fig:trigFix-aspectRatio} demonstrates the relative effectiveness of the correction factor.


\subsection{User Study}
\subsubsection{Applet Description}

An applet demonstrating the effect of changing parameter values on the strength of the illusion can be found at \url{http://www.michaelbach.de/ot/sze_sineIllusion/index.html}. An applet demonstrating not only the effect of parameters on the illusion but also the various correction factors we propose in this paper can be found at \url{http://vanderplas.dyndns-remote.com/SineIllusion}
\todo[inline]{When applet is in quasi-final form, will change this to rstudio's server.}


M Bach's applet  gives the option to compensate the line length manually for its perceived shortcoming. The amount of compensation chosen turns out to be highly dependent on both the length of the vertical line segments and the amplitude of the sine function. While the applet does not provide details on the compensation function, it does suggest that it may be possible to correct the graphical display so that the brain interprets the stimuli in a manner consistent with the numerical data. 
\subsubsection{Study Design}
\subsubsection{Method}
\subsubsection{Results}
Such a correction is significant not only because of its effect on statistical graphics, but because previously attempts to resolve optical illusions using geometry have not met with success \citep{westheimer2008illusions}.

XXX our evidence: 0 is not in the posterior interval ...


\section{Application: USHCN Data}
We will demonstrate the occurrence of the sine illusion as well as the suggested transformations at the example of data from the United States Historical Climatology Network \cite[USHCN;][]{ushcn, ushcn2}.

<<readdata, echo=FALSE>>=
ushcn <- na.omit(read.csv("data/subushcn.csv"))
#monthly <- read.csv("data/monthly-avgs.csv")
#write.table(gsub("#", "*", scan("http://cdiac.ornl.gov/ftp/ushcn_v2_monthly/ushcn-stations.txt", "character", sep="\n")), "data/stations", row.names=FALSE, quote=FALSE)
#stations <- read.fwf("data/stations", widths=c(6, 9, 10, 7, 3, 31, 7, 7, 7, -2, 1), skip=1, stringsAsFactors=FALSE, strip.white=TRUE)
#names(stations) <- c("ID", "Lat", "Long", "Elevation", "State", "Name", "C1", "C2", "C3", "UTCOffset")
#stations[,1] <- paste("0", as.character(stations[,1]), sep="")
#stations[,7:9] <- apply(stations[,7:9], 2, function(str) gsub("------", "", str))
#stations[,1] <- sapply(stations[,1], function(i) substr(i, nchar(i)-5, nchar(i)), USE.NAMES=FALSE)
#stations[,c(5, 6)] <- apply(stations[,5:6], 2, factor)
#stations[,c(1, 7:9)] <- apply(stations[,c(1, 7:9)], 1, function(i) paste("USH00", i, sep=""))

#station.sub <- subset(stations, abs(Lat-35)<5 & Elevation<500)
#write.csv(station.sub, "data/substations.csv", row.names=FALSE)
station.sub <- read.csv("data/substations.csv")
#ushcn.full <- ushcn
#monthly.full <- monthly

# ushcn <- subset(ushcn, ID%in%station.sub$ID)
library(plyr)
suppressMessages(require(lubridate))
suppressMessages(require(ggplot2))
monthly <- ddply(ushcn, .(Time, Month), summarize, sd=sd(value), avg=mean(value), month=unique(Month))
names(monthly) <- c("time", "Month", "sd", "avg", "month")

ushcn$Time <- as.Date(ushcn$Time)
monthly$time <- as.Date(monthly$time)
@

\begin{figure}[hbtp]
\centering
<<rawtemp, dependson='readdata', echo=FALSE, echo=FALSE, fig.width=12, fig.height=4.5, out.width='\\textwidth',cache=TRUE>>=
ggplot()  + geom_jitter(aes(Time, value/100), data=subset(ushcn, Year>1995), size=1) + 
  geom_line(aes(time, avg/100), data=subset(monthly, year(time)>1995), colour="steelblue", size=1.5) + 
  ylab("Temperature (in Celsius)") + theme_bw() + theme(plot.margin = unit(c(0,6,0,0), "cm")) + xlab("Year")
# ggsave(file="figure/monthly-temps.pdf", width=12, height=4.5)

suppressWarnings(require(maps))
states <- map_data("state")
p <- ggplot() + geom_polygon(aes(long, lat, group=group), fill="grey80", data=states) + theme_bw() + 
  theme(panel.grid.major=element_blank(), panel.background = element_blank(),
       panel.grid.minor=element_blank(), #panel.border = element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank(), plot.margin = unit(c(-1,-1,-1,-1), "cm")) +
  geom_point(aes(Long, Lat), colour="black", size=1.25, data=station.sub)

vp1 <- viewport(x = 0.955, y = 0.91, height = unit(2.5, "cm"), width =  unit(4, "cm"), just = c("right","top"))
  
print(p, vp = vp1)
@
% \includegraphics[width=\textwidth]{monthly-temps}
\caption{Raw monthly maximum temperatures (in Celsius) between 1980 and 2012 at 422 stations across the US (as indicated on the map) with similar elevation and latitude. The blue line shows fitted temperatures from a baseline model. The plot suggests that the model fails to capture the more extreme values in summer and winter. \label{fig:raw-temp}}
\end{figure}

\begin{figure}[hbtp]\centering
<<boxtemp, dependson='readdata', echo=FALSE, fig.width=12, fig.height=4.5, out.width='\\textwidth',cache=TRUE>>=
ggplot()  + geom_boxplot(aes(Time, value/100, group=interaction(Year, Month)), outlier.size=1, fill = "grey65", data=subset(ushcn, Year>1995)) + theme_bw() + 
  #geom_line(aes(time, avg/100), data=subset(monthly, year(time)<1995), colour="steelblue", size=1.5, alpha=.5) + 
  ylab("Temperature (in Celsius)")+ xlab("Year")
# ggsave(file="figure/monthly-temps.pdf", width=12, height=4.5)
@

\caption{Monthly boxplot of maximum temperatures (in Celsius) between 1980 and 1995 at 422 stations across the US with similar elevation and latitude. The boxplots suggest that there is more variation in the winter months than in the other seasons. Summer, fall and spring appear to have similar temperature variability, and there are more outliers in the summer.}\label{fig:boxplot-temp}\label{fig:box-temp}
\end{figure}
% \begin{figure}[hbtp]
% \centering
% <<residtemp, dependson='rawtemp', echo=FALSE, echo=FALSE, fig.width=12, fig.height=4.5, out.width='\\textwidth'>>=
% ushcn <- merge(ushcn, monthly[,c("time", "avg")], by.x="Time", by.y="time")
% ushcn$resid <- with(ushcn, value-avg)
% ggplot()  + geom_jitter(aes(Time, resid/100), data=subset(ushcn, Year>1995), size=1, alpha=.5) + 
%   geom_hline(yintercept=0, colour="steelblue", size=1) + 
%   ylab("Residual temperature (in Celsius)") + theme_bw()
% # ggsave(file="figure/monthly-resid-temps.pdf", width=12, height=4.5)
% @
% % \includegraphics[width=\textwidth]{monthly-resid-temps}
% \caption{Residual monthly temperatures (in Celsius) from the baseline model fit.}\label{fig:resid-temp}
% \end{figure}

\begin{figure}[h!tbp]\centering
<<residtempboxplot, dependson='residtemp', echo=FALSE, echo=FALSE, fig.width=12, fig.height=4.5, out.width='\\textwidth'>>=
ggplot()  + geom_boxplot(aes(Year+(Month-1)/12, resid/100, group=Year+(Month-1)/12), data=subset(ushcn, Year>1995), size=1) + 
  # geom_hline(yintercept=0, colour="steelblue", size=1) + 
  ylab("Residual temperature (in Celsius)") + theme_bw() + xlab("Time")
# ggsave(file="figure/monthly-resid-temps.pdf", width=12, height=4.5)
@
\caption{Boxplots of the residuals provide more insight into the seasonal variance: Winters show more variation in temperatures, while summers show much less variation in temperatures. Our initial impression from the boxplots of the raw temperature data was only partially correct - while winters certainly  have higher variation, summers show less variation than the fall and spring, albeit with more outliers.}\label{fig:boxplot-resid-temp}
\end{figure}
Figure \ref{fig:raw-temp}  shows temperature data from 422 stations across the US with similar elevation and latitude. Raw monthly temperatures are overlaid by a fit from a `baseline' model. The deviations from the fit in the extremes of the fit suggest that the baseline model is not quite able to capture all of the variability in summer and winter peaks. However, the model used is actually based on averages in each time point. This model is not susceptible to shrinkage, so the question of higher variability in the peaks becomes the question of how much of this perceived variability is due to perception or real.

After removing the averages in Figure \ref{fig:boxplot-temp} to yield Figure \ref{fig:boxplot-resid-temp} the impression of higher variability in the peaks is only partially confirmed: there is higher variability in the winter, and lower variability in the summer, though there are more outliers in the summer than in the winter.

%\clearpage
\section{Conclusion}
\begin{itemize}\item Raise Awareness\item ``Fixing" data is tricky and usually beyond a statistician's comfort zone, but we could see this as part of an applet where the ``fix" is done temporarily as a diagnostic measure
\item iterative process - we're only doing first step. but then we don't have an explicit functional expression anymore
\item we're only extending line lengths -- some normalization might help
\item there's a long tradition in other disciplines of adjusting work for human cognition, e.g. painters correct (what exactly? forgot), rchitecture: columns of Parthenon are curved to appear straight,  floor and top are curved inwardly to appear straight from a distance.

\end{itemize}
\begin{appendix}
\section{Transformation of the horizontal axis}\label{app.xtrans}
As the slope is determined by the aspect ratio, we are free to choose it and w.l.o.g. we get for each piece $T_i$: 
\[
f(T_i(x)) = \pm a x + b_i.
\]
This means that $T_i$ is essentially an inverse of function $f$, with each piece defined by the   intervals on which the inverse of $f$ exists: let $\left\{x_0 = \min(x), x_1, ..., x_{K-1}, x_K = \max(x) \right\}$ be the set of values with local extrema enhanced by the boundaries of the $x$-range, i.e.  $f^\prime(x_i) = 0$ for  $i = 1, ... , K-1$ and $f^\prime(x) \neq 0$ for any other values of $x$. 
Then each interval of the form $(x_{i-1}, x_i)$ defines one piece $T_i$ of the transfomation function $T(x)$. We will define $T_i$ now as a combination of a linear scaling function and the inverse of $f$, which we know exists for interval $(x_{i-1}, x_i)$.

Let function $s = \s{[a,b]}{[c,d]}$ be the linear scaling function that maps  the interval $(a,b)$ linearly to the interval $(c,d)$. This function is formally defined as
\[
s(x) = \s{[a,b]}{[c,d]} (x) = (x-a)/(b-a) \cdot (d-c) + c \text{ for all } x \in (a,b).
\]
Note that the slope of function $s$ is given as
\[
s^\prime(x) = (d-c)/(b-a).
\]
%
Two scaling functions can be evaluated one after the other, only if the image (i.e. $y$-range) of the first coincides with the domain (i.e. $x$-range) of the second. This consecutive execution results in another linear scaling: 
\[
\s{[e,f]}{[c,d]}  \left(  \s{[a,b]}{[e,f]}(x) \right) = \s{[a,b]}{[c,d]} (x)
\]


In our situation let the scaling function $s$ be given as:
\[
\s{[c,d]}{f([x_{i-1}, x_i])}(x) = f(x_{i-1}) + (x-c)/(d-c) \cdot (f(x_{i}) - f(x_{i-1}))),
\]
where $f([x_{i-1}, x_i])$ is defined as the interval given by $(\min(f(x_{i-1}), f(x_i)), \max(f(x_{i-1}), f(x_i)))$.
Note that $s$ has either a positive or negative slope depending on whether $f(x_{i-1})$ is smaller or larger than $f(x_i)$, respectively.

Then the transformation in the $x$-axis, $T(x)$ is defined piecewise as a combination of $T_i$, where each $T_i$ is given as:
\begin{eqnarray}\label{eq.x.transformation}
T_i(x) &=& f^{-1}\left( \s{[c_i,d_i]}{f([x_{i-1}, x_i])}(x) \right). 
\end{eqnarray}
%
Using this definition for the transformation makes $f(T(x))$ a piece-wise linear function with parameters $c_i$ and $d_i$, i.e. for $x \in (c_i,d_i)$ we have
\[
f(T(x)) = f (f^{-1}(\s{[c_i,d_i]}{f([x_{i-1}, x_i])}(x))) = \s{[c_i,d_i]}{f([x_{i-1}, x_i])}(x).
\]
Correspondingly, the slope of $f(T_i(x))$ is $(f(x_{i}) - f(x_{i-1})))/(d_i-c_i)$.
In order to make the slope the same on all pieces $T_i$ of $T$, we need to define $c_i$ and $d_i$ with respect to the function values on the interval $(x_{i-1}, x_i)$. There are various options, depending on how closely the $x$-range of $T$ should reflect the original range:
for $[c_i, d_i] = \range {f([x_{i-1}, x_i])}$ the new $x$-range is the range of $f$ on $(x_{i-1}, x_i)$, but with the advantage that the scaling function simplifies to the identity or a simple shift.

In order to preserve the original $x$-range, we need to invest into a bit more work for the scaling. With an identity scaling, each $T_i$ maps from the range of $f$ on $(x_{i-1}, x_i)$ to the same range. Overall we can therefore set up the function $T$ to map from the interval given by the sum of the function's `ups' and `downs', i.e.
$(0, \sum_{i=0}^K |f(x_i) - f(x_{i-1})|)$, to the range of $f$ on $(x_0, x_K)$.  This ensures that all pieces $f(T_i)$ have the same slope (of $|1|$).We can then use another - global - linear scaling function to map from the range of $x$, i.e. interval $(x_0, x_K)$ to $(0, \sum_{i=0}^K |f(x_i) - f(x_{i-1})|)$, yielding a transformation function $T$ of

\[
T (x) =  (f^{-1} \circ \s{[c_i,d_i]}{f([x_{i-1}, x_i])} \circ \s{(x_0, x_K)}{(0, \sum_{i=0}^K |f(x_i) - f(x_{i-1})|)}) (x),  
\]
where $c_i$ and $d_i$ are given as 
\[
c_i = \sum_{j=0}^{i-1} |f(x_j) - f(x_{j-1})| \text{ and } d_i = \sum_{j=0}^{i} |f(x_j) - f(x_{j-1})|.
\]
We can write the difference $|f(x_j) - f(x_{j-1})|$ as $\int_{x_{j-1}}^{x_j} |f^\prime(z)|dz$. This shows equation (\ref{eqn.xtrans}).
\section{Reformulation of the quadratic approximation}\label{app.quadratic}
For a quadratic equation with parameters $a, b, c \in R$ of the form 
\begin{equation}\label{quadratic.equation}
ax^2 + bx + c = 0
\end{equation}
we know that solutions come in the form of 
\[
x_{1/2} = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}  = 2c/\left(-b \pm \sqrt{b^2 - 4ac}\right)
\]
\paragraph{Application to quadratic approximation to $f$:}
in the example, we have the following equivalencies:
\begin{eqnarray*}
a &=& f^"(x_0) f^\prime(x_0)^2 \\
b &=& 2(1 + f^\prime(x_0)^2) \hspace{.5in} > 0 \text{ for all } x \\
c &=& \pm \ell \\
\end{eqnarray*}
Using the above equation, we get solutions for $\lambda$ as
\[
\lambda_\pm = 2c\left(-b \pm \sqrt{b^2 - 4ac}\right)^{-1}
\]
For a valid solution for the correction factor, we have to assume that $\lambda$ is positive. This means that for $c = - \ell$, we can only make use of $\lambda_{-}$, which for $c = +\ell$, the only valid solution is given as $\lambda_{+}$:
\begin{eqnarray*}
\lambda_- &=& \ell \left(1 + f^\prime(x_0)^2 + \sqrt{ \left(1 + f^\prime(x_0)^2\right)^2 +  f^{\prime\prime}(x_0) f^\prime(x_0)^2\cdot \ell}\right)^{-1} \\
\lambda_+ &=& \ell \left(-(1 + f^\prime(x_0)^2) + \sqrt{ \left(1 + f^\prime(x_0)^2\right)^2 -  f^{\prime\prime}(x_0) f^\prime(x_0)^2\cdot \ell}\right)^{-1} \\
\end{eqnarray*}

\end{appendix}
\clearpage
\bibliographystyle{asa}
% argument is your BibTeX string definitions and bibliography database(s)
\bibliography{references}
\end{document}


