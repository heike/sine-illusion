\documentclass[11pt]{article}
\usepackage{natbib}
\usepackage{fullpage}
\usepackage{color}
\usepackage{caption}
\usepackage[dvipsnames,svgnames]{xcolor}
\usepackage[colorlinks=TRUE, linkcolor=blue]{hyperref}
\usepackage{wrapfig,float,subcaption}
\usepackage{graphicx}
\usepackage{amssymb}
\usepackage{amsmath}



% help with editing and coauthoring
\usepackage[colorinlistoftodos]{todonotes}

\graphicspath{{figure/}}


<<setup, fig.keep='all', cache=FALSE, echo=FALSE, eval=TRUE>>=
#rm(list=ls())
options(replace.assign=TRUE,width=70)
require(knitr)
opts_chunk$set(fig.path='figure/fig-', cache.path='cache/', fig.align='center', fig.width=5, fig.height=5, fig.show='hold', par=TRUE, cache=TRUE, concordance=TRUE, autodep=TRUE)
library(reshape2)
suppressMessages(library(ggplot2))
library(plyr)
@


\newcommand{\atan}[1]{\text{atan }\left({#1}\right)}
\newcommand{\done}[2][inline]{\todo[color=SpringGreen, #1]{#2}}  % for todos that have been seen and dealt with
\newcommand{\meh}[2][inline]{\todo[color=White, #1]{#2}}   % for todos that may no longer be relevant 
\newcommand{\comment}[2][inline]{\todo[color=SkyBlue, #1]{#2}} % for comments that may not be "to-do"s
\newcommand{\mcomment}[1]{\todo[color=SkyBlue]{#1}} % for margin comments

\newcommand{\newtext}[1]{\todo[inline, color=White]{ \color{LimeGreen}{#1}}} % new text - not necessarily something to be done
\newcommand{\newdo}[1]{\todo[inline, color=Plum]{#1}} % new to do item


\title{Signs of the Sine Illusion -- why we need to care}
\author{Susan Vanderplas, Heike Hofmann, Dianne Cook, Xiaoyue Cheng}

\begin{document}
\maketitle
\begin{abstract}
The sine illusion, which is part of a set of optical illusions which occur based on a conflict between a stimuli and the real-world situation which can cause similar stimuli, has a notable impact on perception of time-series data with a seasonal component. In this paper, we discuss the reasons for the illusion and various strategies which might be useful to break the illusion or reduce its' strength, demonstrating the presence of the illusion in real-world and theoretical situations. We also present data from user studies which demonstrate the dramatic effect the sine illusion can have on conclusions drawn from displayed data.
\end{abstract}
\tableofcontents

\section{Introduction}
\newtext{Graphics are powerful tools for summarizing large or complex data. The main premise in our dealings with statistical graphics is that
graphics have to be true to the data (e.g. lie factor Tufte, Wainer, ...). Computational tools help us ensure technical trueness -- but how do we deal with situations that involve innate inability or trigger learned misperceptions? In this paper we want to raise awareness for one of these situations, show that it occurs frequently in our dealings with graphics and provide different attempts at solving or avoiding it.
}

\newdo{We need a relevant example as a hook - then explain to people what trap they fell in.}
The sine illusion, shown in Figure \ref{original}, is an optical illusion which has a pervasive effect on our ability to interpret statistical graphics commonly used for time-series data. Data which follows a sinusoidal trend seems to have higher variance at the peak and trough, and much lower variance where the slope of the curve is steepest. 


<<data, echo=FALSE, eval=TRUE>>=
f <- function(x) 2*sin(x)
fprime <- function(x) 2*cos(x)
f2prime <- function(x) -2*sin(x)

createSine <- function(n=200, len=1, f=f, fprime=fprime) {
  x <- seq(0, 2*pi, length=n)
  l <- rep(len, length=length(x))
  fx <- f(x)
  ystart <- fx - .5*l
  yend <- fx + .5*l
  ell <- yend-ystart
  # now correct for line illusion in vertical direction
  dy <- diff(range(fx))
  dx <- diff(range(x))
# fprime works in framework of dx and dy, but we represent it in framework of dx and dy+len
# needs to be fixed by factor a:  
  a <- dy/(dy + len) 
# ellx is based on the "hammock" correction
  ellx <- ell / cos(atan(abs(a*fprime(x))))
# ellx2 is based on linear approximation of f  
  ellx2 <- ell * sqrt(1 + a*fprime(x)^2)
# third adjustment is based on quadratic approximation of f.
# this needs two parts: correction above and below f(x)  
  
  # make this a data frame - ggplot2 doesn't do well with floating vectors
  dframe <- data.frame(x=x, xstart=x, xend=x, y=fx, ystart=ystart, yend=yend, ell=ell, ellx = ellx, ellx2=ellx2)
  
  dframe
}
@
\begin{figure}[hbtp]
\centering
\begin{minipage}{.49\linewidth}
<<original, dependson='data', echo=FALSE, results='asis', fig.width=5, fig.height=5>>=
qplot(x=x, xend=xend, y = ystart, yend=yend, geom="segment", data=createSine(40, 1, f=f, fprime=fprime)) +
  theme(panel.grid.major=element_blank(), panel.background = element_rect(fill = "white", 
                colour = "black"),
       panel.grid.minor=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank()) + coord_equal(ratio=1)
@
\end{minipage}\begin{minipage}{.49\linewidth}
<<original-redo, echo=FALSE, fig.keep='none', results='hide', fig.keep='all'>>=
cairo_pdf("./figure/fig-original-redo.pdf", width=5, height=5)
df1 <- createSine(20,1, f=f, fprime=fprime)
df1$colour <- c(rep("A", 5), "A", rep("A", 13), "A")
qplot(x=xstart, xend=xend, y = ystart, yend=yend, geom="segment", data=df1, colour=I("grey20")) +
  theme(panel.grid.major=element_blank(), 
        panel.background = element_rect(fill = "white", colour = "black"),
        panel.grid.minor=element_blank(), panel.background=element_blank(),
        axis.title = element_blank(), axis.ticks = element_blank(), 
        axis.text = element_blank()) + coord_equal(ratio=1) + 
  geom_segment(x=-pi/12, xend=2*pi+pi/12, y=0, yend=0, colour="grey80", linetype=2)+
  geom_segment(aes(x=x, xend=xend, y=y, yend=yend), colour="grey50", 
               data=data.frame(x=c(df1$x[6],  mean(df1$x[5:6]), mean(df1$x[5:6])), 
                               xend = c(mean(df1$x[5:6]), mean(df1$x[5:6]), df1$x[6]),
                               y = c(df1$y[6], df1$y[6], 0), 
                               yend = c(df1$y[6], 0, 0)), size=1) + 
  geom_text(aes(x=df1$x[5], y=df1$y[6]/2, label="s"), hjust=1, vjust=.5, size=10, colour="grey50") + 
  geom_segment(aes(x=x, xend=xend, y=y, yend=yend), colour="grey60", 
             data=data.frame(x=c(df1$x[20],  mean(df1$x[19:20]), mean(df1$x[19:20])), 
                             xend = c(mean(df1$x[19:20]), mean(df1$x[19:20]), df1$x[20]),
                             y = c(df1$ystart[20], df1$ystart[20], df1$yend[20]), 
                             yend = c(df1$ystart[20], df1$yend[20], df1$yend[20])), size=1) +
  geom_text(aes(x=df1$x[19], y=df1$y[20], label="\u2113"), hjust=1, vjust=.5, size=10, colour="grey60")
dev.off()
@
\includegraphics[keepaspectratio=true, width=\linewidth]{fig-original-redo.pdf}
\end{minipage}
\caption{\label{original}The original Sine Illusion. The regions of the left graph in the peak and the valley appear to be composed of longer lines than the other regions. The right graph illustrates the parameters determining the appearance of the illusion: $s$ denotes the amplitude of the function, $\ell$ the length of the line segments.}
\end{figure}

\subsection{Perceptual Explanations for the Sine Illusion}
One presentation \mcomment{\footnotesize Presentation isn't the right word... occurrence?} of the Sine illusion comes from M. Bach's applet \citep{bach}, which cites perception research suggesting that the sine illusion occurs due to misapplication of perceptual experience with the three-dimensional world to a two-dimensional ``artificial" display of data. One possible three-dimensional context for similar stimuli is shown in Figure \ref{ribbon-illusion}.

\begin{figure}[h!tbp]\centering
<<ribbon-illusion,echo=FALSE, fig.keep='none', fig.width=5, fig.height=2.6>>=
angle <- .02
shift <- pi/30
x <- seq(-1*pi, 1*pi, pi/30)
persp <- data.frame(xtop=x+shift + angle, xbottom=x-shift, ytop = (1-angle)*sin(x+shift)+1/2, ybottom = (1+angle)*sin(x+shift)-1/2)
persp$ell <- with(persp, sqrt((xbottom-xtop)^2 + (ybottom-ytop)^2))
qplot(data=persp, x=xtop, xend=xbottom, y=ytop, yend=ybottom, geom="segment") + ggtitle("What the brain expects the data to look like") + 
  xlab("") + ylab("") + 
  theme(panel.grid.major=element_blank(), 
        panel.background = element_rect(fill = "white", colour = "black"),
        panel.grid.minor=element_blank(), panel.background=element_blank(),
        axis.title = element_blank(), axis.ticks = element_blank(), 
        axis.text = element_blank()) + coord_equal(ratio=1) +
  geom_line(aes(x=xtop, y=ytop), size=1)+
  geom_line(aes(x=xbottom, y=ybottom), size=1.5)


@
\includegraphics[width=.5\linewidth, keepaspectratio=TRUE]{figure/fig-ribbon-illusion}
\caption{Experience with real-world objects suggests that the data are most similar to a slightly angled top view of a 3-dimensional strip such as a ribbon. Even though the sine illusion lines are not angled, the brain often recruits paradigms from one situation when processing novel stimuli. Optical illusions result from the mismatch between the applied heuristic and the stimulus. \citep{goldstein}} % goldstein S&P 8th edition pg 249
\label{ribbon-illusion}
\end{figure}

An interesting facet of the sine illusion is that when the graph is examined as if it were a two-dimensional projection of a three-dimensional figure, the illusion disappears and the line widths seem once more to be constant. In addition, if the lines are considered without the surrounding context, judgments comparing two lines are relatively accurate, particularly if the graph also includes horizontal reference lines, as in Figure \ref{original-grid}. 


\begin{figure}[hbtp]
\centering
<<originalgrid, dependson='data', echo=FALSE, results='asis',out.width=".5\\linewidth">>=
dframe <- createSine(n = 40, len = 1, f=f, fprime=fprime)

qplot(x=x, xend=xend, y = ystart*ell, yend=yend*ell, geom="segment", data=dframe) +
  theme(panel.grid.major.y=element_line(colour="grey75"), 
        panel.grid.minor.y=element_line(colour="grey85"), 
        panel.grid.major.x=element_blank(),
        panel.background = element_rect(fill = "white", 
                colour = "black"),
       panel.grid.minor.x=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank()) + coord_equal(ratio=1)
@
\caption{\label{original-grid} Horizontal grid lines do not help to resolve the illusion, even though they provide a clear basis for comparison of line lengths.}
\end{figure}

Though it is typically a bad idea to use three-dimensional representations when two dimensions are adequate to display the data \citep{tufte}, in this case, the data are perceived more accurately. A three-dimensional projection of two-dimensional data, however, is not easy to create and would likely lead to distortions and instability in the visual display. In particular, there does not seem to be an easy guideline for determining the projection angle or color gradient that would be necessary to create the illusory depth that would remove the optical illusion. 

While not thoroughly examined in the sensation and perception literature, the sine illusion seems to have been classified as part of a group of geometrical optical misperceptions which may be related to the M\"uller-Lyer illusion \citep{day:1991} or the Poggendorf illusion \citep{poggendorf}.  Figure \ref{original} shows a reproduction of Bach's applet \citep{bach} displaying the sine illusion. The sine illusion is closely related to the line width phenomenon -- the line segments along the steepest slopes of the sine curve appear to be the shortest: ``The illusion is explained in terms of a perceptual compromise between the vertical extent and the greater overall dimensions of the section at the turn of the sine-wave figure and is thereby held to be the same in principle as the M\"uller-Lyer illusion." \citep{day:1991}.
M Bach's applet  gives the option to compensate the line length manually for its perceived shortcoming. The amount of compensation chosen turns out to be highly dependent on both the length of the vertical line segments and the amplitude of the sine function. While the applet does not provide details on the compensation function, it does suggest that it may be possible to correct the graphical display so that the brain interprets the stimuli in a manner consistent with the numerical data. 

\subsection{Statistical Graphics and the Line Width Illusion}
While the illusion presented above is termed the sine illusion, it holds for non-sinusoidal curves which have dramatic changes in the slope of the lines over time as well. Figure \ref{playfair-debt} shows one example of this common phenomenon \citet{playfair, playfair2}: the vertical distance between the two lines is much less visually salient than the extant width of the line, that is, the width of the line segment which is perpendicular to the tangent line at a given point.

\begin{figure}[htbp]
\centering
\includegraphics[keepaspectratio=TRUE,width=.8\linewidth]{images/PlayfairExportImports}
\caption{Playfair's graph of exports to and imports from the East Indies demonstrates that the line width illusion is not only found on sinusoidal curves but is present whenever the slope of the lines change dramatically. The increase in both imports and exports circa 1763 does not appear to portray as large of a deficit as that in 1710, even though they are of similar magnitude.}
\label{playfair-debt}
\end{figure}

Another example of this phenomenon is shown in Figure \ref{robbins-graph} \citep{robbins:2005}. The line-width illusion is also present in the graphs of $e^x$ and $e^x + 1$, as the lines appear to be separated by a much smaller distance at $x=2.5$ than at $x=0$.
\begin{figure}[htbp]
\centering
<<effectivegraphsfig,echo=FALSE>>=
x <- seq(0, 2.5, .01)
y1 <- exp(x)
y2 <- exp(x)+1
df <- data.frame(x=x, y=y1, y2=y2)
qplot(data=df, x=x, y=y, geom="line") + geom_line(aes(y=y2)) + theme_bw()
@
\caption{A replication of Figure 2.16 in \cite{robbins:2005}. The line width illusion is present in non-periodic functions as well and seems to be related to increasing slope - as the slope increases, the apparent distance between the two lines decreases, even though the lines are separated by a constant distance.}
\label{robbins-graph}
\end{figure}

\cite{cleveland:1984, cleveland:1985} also discuss the perceptual difficulty of judging the difference between two curves plotted on the same axis. They recommend the difference between the two curves as an alternate display, as shown in the second part of Figure \ref{cleveland-figure}. While this is good practice when there are two separate curves (as in Figure \ref{playfair-debt}), when the contours of the data implicitly create two curves (the boundaries of the variability in the data) there is not an easy way to display the difference between these implicit curves without resorting to arbitrary minimum and maximum smoothing values. In addition, as in Figure \ref{playfair-debt} both the difference between the curves and the overall trend are of visual importance, and plotting the difference between the two curves removes the overall trend. 

\begin{figure}[h!tbp]
\centering
%\includegraphics[keepaspectratio=TRUE, width=.5\linewidth]{images/ClevelandMcGillFig7}
<<clevelandgraph,echo=FALSE, fig.width=6, fig.height=8, include=FALSE>>=
x <- seq(0, 4, .01)
y <- 8-(x-2.5)^2
y1 <- 8- (x-2.5)^2 - (1-(x/8))
df <- data.frame(x=x, y=y, y2=y1)
p1 <- qplot(data=df, x=x, y=y, geom="line") + geom_line(aes(y=y2)) + theme_bw()
p2 <- qplot(data=df, x=x, y=y-y1, geom="line") + theme_bw() + ylab(expression(paste(y-y,"'",sep="")))
suppressMessages(library(gridExtra))
grid.arrange(p1, p2, nrow=2, heights=c(1.5, 1))
@
\includegraphics[keepaspectratio=TRUE, width=.5\linewidth]{figure/fig-clevelandgraph}
\caption{\cite{cleveland:1985} examined the task of judging the distance between two curves experimentally: ``In the top panel it is difficult to judge how much greater the y-values of curve 1 are than those for curve 2 because our visual system has difficulty detecting the vertical distances between the curves. In the bottom panel the differences are graphed directly; the values are quite different from how they appear in the top panel"}
\label{cleveland-figure}
\end{figure}

\begin{figure}
<<cleveland, echo=FALSE, fig.width=6, fig.height=6, out.width='0.5\\textwidth'>>=
f <- function(x) -x^2
sdf <- function(x) (4-0.5*x)/5
  
x <- seq(-2,2.5, by=0.1)

id <- 1:30
dframe <- expand.grid(x=x, id=id)
dframe$y <- with(dframe, rnorm(n=nrow(dframe), mean=f(x), sd=sdf(x)/2))
qplot(x,y, data=dframe, geom="jitter")
@
\caption{Alternative to the cleveland figure: in order to get around copyright, we could use the idea of shrinking distance (= decreasing variance) and introduce the new concept that it doesn't have to be two lines, but judging variability. Question to the audience: `Where's the variance the highest?' or `Describe the conditional variability of the points along the $x$ axis`}
\label{cleveland-figure-2}
\end{figure}

% More recently, the line-width illusion has been cited as a reason to modify parallel sets plots to avoid pitfalls in human perception.  Figure \ref{hammocks} shows the parallel sets plot, the hammock plot, and the common angle plot, which has been modified so that all angles are constant. The hammock plot corrects for the line width illusion, where the common angle plot holds all of the angles constant so as not to require correction. 
%These two approaches are similar to the approaches we will take in correcting the sine illusion by adjusting the vertical height so that the extant width appears constant, and by modifying the $x$ axis so that the slope appears to be constant. These two approaches will produce somewhat different graphical displays.
% \begin{figure}[h!tbp]
% \centering
% \missingfigure{Figure or figures showing hammock plots and the corrected version. I'd copy them from the paper but I'm sure there's a better version that was used to generate the paper.}
% \caption{}
% \label{hammocks}
% \end{figure}
\clearpage
\todo[inline]{Add variance simulation section}
\subsection{Geometry of the Sine Illusion}
The visual preference for judging the length of the line by the orthogonal extant suggests that the underlying illusion may be a function of geometry rather than some mysterious visual process that occurs automatically between perception of the stimulus and conscious thought. If this is the case, then it may be that by comparing the orthogonal width and the vertical length of the line it may be possible to dissect the illusion and correct the graphical display so that it is not as visually deceptive.

Using the notation given in Figure \ref{original}, we assume a value $s$ for the sine amplitude, $\ell$ for the vertical length of line segments, and $\ell_c$ for the amount of compensation. 
The sine curve is then given by function $f$, written as 
\[
f(x) = s \cdot \sin(x)
\]
for $x$ in $[-\pi, \pi]$. The slope of the sine curve is the steepest in its reflection point at $x=0$. We can calculate the slope as $f^\prime(x) = s \cos(x)$, which in $x=0$ yields a slope of $s/2$.

These differences in the slope are the reason we perceive the lines to have different length, as we have an innate tendency to evaluate line or band widths orthogonally rather than vertically, even though the mathematical judgment requires evaluation of the vertical distance. 

\begin{figure}[h!tbp]
\begin{center}
\includegraphics[width=0.3\linewidth]{images/linewidth}
\end{center}
\caption{\label{fig:linewidth}Sketch of line width assessments: (a) is showing  vertical width, (b) shows  width orthogonal to the slope. \comment{From previous surveys (we could cite Marie's survey here) we know that  observers associate line width more with  orthogonal width (b) than vertical width (a).}}
\end{figure}
% 

Orthogonal $w_o$ and vertical $w_v$ line widths are related -- the orthogonal line width depends on the angle (or, equivalently, the slope) of the line:
\begin{equation}\label{adjust}
w_o = w_v \cos \theta,
\end{equation}
where $\theta$ is the acute angle between the secant line and the vertical, that is, $\theta \in (-pi, pi]$.
\begin{figure}[h!tbp]
\centering
<<transform-illustration,echo=FALSE, message=FALSE, warning=FALSE, cache=FALSE>>=
library(plyr)
dframe <- createSine(n = 150, len = 1, f=f, fprime=fprime)
dframe$ystartcts <- dframe$ystart
dframe$yendcts <- dframe$yend
dframe[1:150,c(2, 3, 5, 6)] <- NA
dframe[(1:15)*10-5, c(2, 3)] <- dframe[(1:15)*10-5, 1] 
dframe[(1:15)*10-5, 5] <- dframe[(1:15)*10-5, 4] - .5
dframe[(1:15)*10-5, 6] <- dframe[(1:15)*10-5, 4] + .5
dframe$type <- "Data"
getSecantSegment <- function(x0, df, f, fprime, f2prime){
  secSlope   <- -1/fprime(x0)
  ell.x0     <- df$ell[which.min(abs(df$x-x0))]/2
  #--- Actual Roots
  #  temp       <- seq(min(df$x)-pi, max(df$x)+pi, .0001)
  #   leftend    <- temp[which.min(abs(f(temp) + ell.x1 - secSlope*(temp-x1)))]
  #   rightend   <- temp[which.min(abs(f(temp) - ell.x1 - secSlope*(temp-x1)))]
  #---
  
  #--- Approximation
  lambda1 <- (-(fprime(x0)^2 + 1) + sqrt((fprime(x0)^2 + 1)^2 - 2* fprime(x0)^2*f2prime(x0)*ell.x0))/(fprime(x0)^2*f2prime(x0))
  lambda2 <- (-(fprime(x0)^2 + 1) + sqrt((fprime(x0)^2 + 1)^2 + 2* fprime(x0)^2*f2prime(x0)*ell.x0))/(fprime(x0)^2*f2prime(x0))
  
  leftend <- lambda1*fprime(x0)+x0
  rightend <- lambda2*fprime(x0)+x0
  #---
  
  df2 <- data.frame(x=x0, y=f(x0), deriv=fprime(x0),
                    sec.xstart=leftend, sec.xend=rightend, 
                    sec.ystart=f(x0) -lambda1,
                    sec.yend = f(x0) -lambda2,
                    ell.orig = 2*ell.x0)

  df2$sec.ell1 <- with(df2, sqrt((sec.yend-y)^2+(sec.xend-x)^2))
  df2$sec.ell2 <- with(df2, sqrt((y-sec.ystart)^2+(x-sec.xstart)^2))
  df2$type <- "Perceived Width"
  return(df2)
}


dframe.1 <- getSecantSegment(dframe$xstart, dframe, f, fprime, f2prime)

names(dframe.1) <- c("x", "y", "deriv", "xstart", "xend", "ystart", "yend", "ell", "ell.quad1", "ell.quad2", "type")
dframe.1 <- dframe.1[!is.na(dframe.1$x),]
dframe.1$vangle <- with(dframe.1, asin((xstart-x)/ell.quad1))
# dframe.1$x <- dframe$x
# dframe.1$y <- dframe$y
# dframe.1$ystartcts <- dframe$ystartcts
# dframe.1$yendcts <- dframe$yendcts
dframe <- rbind.fill(dframe, dframe.1)


qplot(x=x, y=y, geom="line", data=dframe, colour=I("grey50")) + theme_bw() + 
  geom_line(aes(y=ystartcts), colour="grey50", linetype=4) + 
  geom_line(aes(y=yendcts), colour="grey50", linetype=4) +
  geom_segment(data=subset(dframe, !is.na(type)), aes(x=xstart, xend = xend, y=ystart, yend=yend, colour=type))  + 
  coord_equal(ratio=1) + scale_colour_manual("", values=c("black", "blue")) + theme(legend.position="bottom")  + 
  geom_text(aes(label=paste("theta", "%~~%", round(vangle/pi*180), "^o", sep=""),
                x=xstart/2+x/2-sign(vangle)*.1, y=y-sign(vangle)*.64+.04), data=dframe.1, parse=TRUE, hjust=.75, vjust=.5, size=2.5) + 
  xlim(c(-pi/8, 17*pi/8)) + 
  scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), 
                     labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi))))
  # + ggtitle("Changes in Perceived Orthogonal Width \ndue to Change in Secant Angle")
@
% \includegraphics[width=.45\linewidth, keepaspectratio=TRUE]{figure/fig-transform-illustration}
\caption{\label{OrthogonalWidth} Changes in perceived orthogonal width due to the change in secant angle. The perceived length of the vertical line changes with the angle of the line perpendicular to the slope of $\sin(x)$, suggesting that the sine illusion stems from a conflict between the visual system's perception of figure width and the mathematical judgement necessary to determine the length of the vertical lines.
}
\end{figure}


\comment{This probably should be moved, or re-fashioned into a nice transition between sections...}
The sine illusion disappears when the width orthogonal to the slope is made constant. This can be done by forcing the magnitude of the slope to be constant (by transforming the $x$ axis), or by making the lines appear to be of the same height, by adjusting their lengths to maintain a constant orthogonal width. This is the approach that we pursue when transforming the $Y$ values. 
\clearpage
\section{Breaking the Sine Illusion}
Though the line-width illusion clearly occurs in non-sinusoidal curves, for the purposes of consistency, we will proceed with data derived as follows: equally spaced points $x$ along the interval $[0,2\pi]$ which correspond to lines centered at $y=s*sin(x)$ with length $\ell$. The slope of the tangent line at a point $x=x_0$ is $y=s*cos(x_0)$, and thus the slope of the line orthogonal to the slope (along which the width is perceived) is $y=-1/(s*cos(x_0))$. Individual lines can of course be completely determined by substituting in the point $x_0, y_0$ to find the corresponding $y-intercept$.

\subsection{Trend Removal}
The most obvious approach to breaking the sine illusion is to present the trend and variance separately, as shown in Figure \ref{trendremoval}. A Loess smooth was used to estimate the trendline, and this estimate was subtracted from the line center to produce separate graphs of the trend and the variance. While this does largely remove the sine illusion, it also makes it somewhat more difficult to parse the overall data, as judgments must be made by combining two graphs or by mentally re-composing the original graph (at which point, the sine-illusion becomes a factor). Ideally, it would be possible to tell the whole story with a single graph, to minimize cognitive demands - while this example is relatively simple, it would be much harder to create a de-trended version of Figure \ref{playfair-debt} that could be easily assessed to determine both trend and change in the size of the trade imbalance over time. 
\begin{figure}[h!tbp]\centering
<<trend-removal, include=FALSE, fig.height=4, fig.width=4>>=
df <- df2 <- createSine(40, 1, sin, cos)
df2$y <- loess(df$y~df$x)$fitted
df2$type <- "Loess Fit"
df$type <- "Original Function"
df <- rbind(df, df2)

ggplot(data=df,aes(x=x, y=y)) + geom_segment(aes(x=xstart, xend=xend, y=ystart, yend=yend)) + geom_line(aes(group=type, linetype=type)) + scale_linetype_discrete("") + theme_bw() + theme(legend.position="bottom")
qplot(data=subset(df, type=="Loess Fit"), x=xstart, xend=xend, y=ystart-y, yend=yend-y, geom="segment", linetype=type)  + xlab("x")+ ylim(c(-1.5, 1.5)) + theme_bw()+ scale_linetype_discrete("", labels="De-Trended Data") + theme(legend.position="bottom")
qplot(data=subset(df, type=="Loess Fit"), x=x, y=y, geom="line", linetype=type) + xlab("x") + ylim(c(-1.5, 1.5)) + theme_bw() + scale_linetype_discrete("") + theme(legend.position="bottom")
@
\begin{subfigure}[b]{.32\linewidth}
  \centering
  \includegraphics[width=\textwidth]{figure/fig-trend-removal1}
  \caption{\small Original Data}
  \label{trendremovalFit}
\end{subfigure}
\begin{subfigure}[b]{.32\linewidth}
  \centering
  \includegraphics[width=\textwidth]{figure/fig-trend-removal2}
  \caption{\small Variability}
  \label{trendremovalVariability}
\end{subfigure}
\begin{subfigure}[b]{.32\linewidth}
  \centering
  \includegraphics[width=\textwidth]{figure/fig-trend-removal3}
  \caption{\small Trend}
  \label{trendremovalLine}
\end{subfigure}
\caption{Separating the trend and the variability removes the Sine illusion. Figure \ref{trendremovalFit} shows the fit line compared to the original function, Figure \ref{trendremovalVariability} shows the remaining trend in the vertical lines, which now appear to be of the same size, and Figure \ref{trendremovalLine} shows the underlying fitted trendline without the accompanying vertical lines.}\label{trendremoval}
\end{figure}
 \todo[inline]{Need to expand the discussion (i.e. harder to interpret graphs like this, requires more cognitive load, etc.), but don't want to make unsupported claims}
\subsection{Transformation of the X-Axis}
One approach to breaking the power of the sine illusion is to remove the variation in slope by transforming the $x$ axis so that the slope remains constant. This is similar in nature to the approach taken by common angle plots in removing the line width illusion: by fixing the angle at which the two sets are connected, it is possible to compare line widths, because the extant widths are proportional to the actual widths. 

Geometrically, we want to take the horizontal distance $\triangle x$ between two points and fix it so that the extant width $\triangle x/\triangle y$ is constant, that is, $\triangle \tilde x \propto |\triangle y/\triangle x|$ is the new horizontal distance between the two points. Translating this to a continuous expression, we want $|f^\prime(x)| \propto d\tilde x$. This transformation can be considered as a reparameterization of the $x$ axis in terms of the slope, that is, since the slope of the graph seems to be the visually salient detail, it makes sense to reparameterize the axis in terms of the slope so that it is possible to see the other information contained in the graphic. 

\begin{figure}[h!tbp]\centering
<<xtransform, echo=FALSE>>=
f <- sin
fprime <- cos
dframe <- createSine(40 , len=1, f=f, fprime=fprime)
dframe$correction <- abs(cos(dframe$x))
dframe$correction <- dframe$correction/(sum(dframe$correction))*2*pi
dframe$correction2 <- rowMeans(cbind(abs(cos(dframe$x)), mean(abs(cos(dframe$x)))))
dframe$correction2 <- dframe$correction2/sum(dframe$correction2)*2*pi

dframe$xtrans <- cumsum(dframe$correction) # Create transformed X axis
dframe$xtrans2 <- cumsum(dframe$correction2) # Create transformed X axis

qplot(x=xtrans, xend=xtrans, y = ystart, yend=yend, colour=I("blue"), geom="segment", main="Transformed X Axis", data=dframe) +
  geom_segment(aes(x = 0, xend=2*pi, y=0, yend=0), colour="black") +theme_bw() + coord_fixed(ratio=1) + xlab(expression(tilde(x))) + ylab("y")
@
\caption{Adjusting the x-spacing of the lines mitigates the sine illusion by changing the extant width so that it is uniform in $x$}
\label{xtrans1}
\end{figure}
Interestingly, the illusion can be broken by a much less severe transformation in $x$. By averaging the transformation in Figure \ref{xtrans1} with the average absolute slope over the range of $x$ values, that is $\tilde x^\prime \propto .5 d\tilde x + .5(1/n\sum_{i=1}^n |cos(x_i)|)$ where $n$ is the number of lines at points $x_i$, the illusion is still broken and the data are closer to the original function $y=sin(x)$. The extent to which this weighting holds is likely to vary with the aspect ratio and the shape of the function, but merits further investigation, as it may be possible to find an ``optimal weighting" for specific situations which minimizes distortion and maximizes the correspondence between inferences made from the data and inferences made using the visual display.
\begin{figure}[h!tbp]\centering
<<xtrans-mid,echo=FALSE>>=
qplot(x=xtrans2, xend=xtrans2, y = ystart, yend=yend, colour=I("blue"), geom="segment", main="Transformed X Axis", data=dframe) +
  geom_segment(aes(x = 0, xend=2*pi, y=0, yend=0), colour="black") +theme_bw() + coord_fixed(ratio=1) + xlab(expression(tilde(x))) + ylab("y")
@
\caption{Using a less severe adjustment, the illusion is still broken with a smaller distortion along the $x$ axis.}
\label{xtrans2}
\end{figure}
\clearpage
\subsection{Transformation of the Y-Axis}
Another potentially less disruptive option to break the sine illusion is to transform the line length directly so that the resultant extant width appears to be constant. 
\subsubsection{Linear Method}
This approach aims to extend the orthogonal width, which onlookers generally evaluate,  to the amount of the vertical width, which we want to represent. 
We first multiply the vertical width by a factor of $1/\cos\theta$, where $\theta$ is the angle under which the line is drawn. This angle is given by the slope of the function, mathematically we know that in position $x$ the angle $\theta(x)$ of function $f(x)$ is given as:
\[
\tan \theta (x) = f^\prime (x).
\]
We only distinguish the size, not the sign of the angle, which gives us an overall correction factor for the line width in vertical direction of 
\begin{equation}\label{hammockCorrection}
\atan{\cos \left| f^\prime (x) \right|}^{-1}
\end{equation}

\begin{figure}[h!btp]
<<hammockFix, dependson='data', echo=FALSE, include=FALSE>>=
dframe <- createSine(40,1, f=f, fprime=fprime)
qplot(x=x, xend=xend, y = f(x) -ell/2, yend=f(x) +ell/2, geom="segment", data=dframe) +
  theme(panel.grid.major=element_blank(), panel.background = element_rect(fill = "white", 
                colour = "black"),
       panel.grid.minor=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank()) + coord_equal(ratio=1)

qplot(x=x, xend=xend, y = f(x) -ellx/2, yend=f(x) +ellx/2, geom="segment", data=dframe) +
  theme(panel.grid.major=element_blank(), panel.background = element_rect(fill = "white", 
                colour = "black"),
       panel.grid.minor=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank()) + coord_equal(ratio=1)

qplot(x=x, xend=xend, y = f(x) -ellx2/2, yend=f(x) +ellx2/2, geom="segment", data=dframe) +
  theme(panel.grid.major=element_blank(), panel.background = element_rect(fill = "white", 
                colour = "black"),
       panel.grid.minor=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank()) + coord_equal(ratio=1)

@
\begin{subfigure}[b]{.3\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-hammockFix1}
\caption{Uncorrected}
\end{subfigure}
\begin{subfigure}[b]{.3\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-hammockFix2}
\caption{Correction factor in Eqn \ref{hammockCorrection}}
\end{subfigure}
\begin{subfigure}[b]{.3\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-hammockFix3}
\caption{Correction factor in Eqn. \ref{LinearApprox}}
\end{subfigure}
\caption{First two fix of the sine illusion by using the factor of $1/\cos\left(\atan{|f^\prime(x)|}\right)$} (middle) and $\sqrt{1 + f^\prime(x)^2}$ (right) for adjusting the vertical extent of the lines.  
\label{hammockFix} 
\end{figure}

As in \todo{Cite Marie's paper}, the correction factor necessary to remove the illusion depends on the aspect ratio of the graphs. Figure \ref{hammockFix-aspectRatio} demonstrates the relative effectiveness of the correction factor.
<<hammocktransform, echo=FALSE>>=
f <- function(x) sin(x)
fprime <- function (x) cos(x)


adjY <- function(df){
  dx <- diff(df$x)
  dy <- diff(df$y)
  #aspratio <- abs(diff(range(c(df$ystart, df$yend)))/diff(range(df$x)))
  aspratio <- 1
  adj <- atan(dy/dx)
  adj <- c(adj, rev(adj)[1])
  adj <- 1/cos(atan(abs(aspratio*adj)))
  adj <- adj-mean(adj)+1
  
  df$ell <- df$ell*adj
  df$ystart <- df$y - .5*df$ell
  df$yend <- df$y + .5*df$ell
  
  df
}

dframe1 <- createSine(n=40, len=1, f=f, fprime=fprime)
dframe1 <- adjY(dframe1)
@
\begin{figure}[h!tbp]\centering
<<hammocktransform1-plot, echo=FALSE, include=FALSE>>=
qplot(x=xstart, xend=xend, y = ystart, yend=yend, colour=I("blue"), geom="segment", main="Transformed Length", data=dframe1) + ylim(c(-pi/2, pi/2))+ coord_fixed(ratio=2) + xlab("x") + ylab("y")
qplot(x=xstart, xend=xend, y = ystart, yend=yend, colour=I("blue"), geom="segment", main="Transformed Length", data=dframe1) + ylim(c(-pi, pi))+ coord_fixed(ratio=2)+ xlab("x") + ylab("y")
qplot(x=xstart, xend=xend, y = ystart, yend=yend, colour=I("blue"), geom="segment", main="Transformed Length", data=dframe1) + ylim(c(-2*pi, 2*pi))+ coord_fixed(ratio=2)+ xlab("x") + ylab("y")
@

\begin{subfigure}[b]{.3\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-hammocktransform1-plot1}
\caption{Aspect Ratio of .5}
\end{subfigure}
\begin{subfigure}[b]{.3\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-hammocktransform1-plot2}
\caption{Aspect Ratio of 1}
\end{subfigure}
\begin{subfigure}[b]{.3\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-hammocktransform1-plot3}
\caption{Aspect Ratio of 2}
\end{subfigure}
\caption{Changing aspect ratios changes the strength of the illusion and the effectiveness of the transformation}\label{hammockFix-aspectRatio} 
\end{figure}

\begin{figure}[h!tbp]
\centering
<<linearFixOvercorrect, dependson='data', echo=FALSE, include=FALSE>>=
g <- function(x) 5*sin(x)
gprime <- function(x) 5*cos(x)
dframe <- createSine(100, len=5, f=g, fprime=gprime)
ar <- 1
qplot(x=x, xend=xend, y = g(x) -ell/2, yend=g(x) +ell/2, geom="segment", data=dframe) +
  theme(panel.grid.major=element_blank(), panel.background = element_rect(fill = "white", 
                colour = "black"),
       panel.grid.minor=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank()) + coord_equal(ratio=ar)

qplot(x=x, xend=xend, y = g(x) -ellx/2, yend=g(x) +ellx/2, geom="segment", data=dframe) +
  theme(panel.grid.major=element_blank(), panel.background = element_rect(fill = "white", 
                colour = "black"),
       panel.grid.minor=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank()) + coord_equal(ratio=ar)

qplot(x=x, xend=xend, y = g(x) -ellx2/2, yend=g(x) +ellx2/2, geom="segment", data=dframe) +
  theme(panel.grid.major=element_blank(), panel.background = element_rect(fill = "white", 
                colour = "black"),
       panel.grid.minor=element_blank(), panel.background=element_blank(),
       axis.title = element_blank(), axis.ticks = element_blank(), 
       axis.text = element_blank()) + coord_equal(ratio=ar)
@

\begin{subfigure}[b]{.3\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-linearFixOvercorrect1}
\caption{$\ell=5$, Uncorrected}
\end{subfigure}
\begin{subfigure}[b]{.3\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-linearFixOvercorrect2}
\caption{Corrected by Eqn. \ref{hammockCorrection}}
\end{subfigure}
\begin{subfigure}[b]{.3\linewidth}\centering
\includegraphics[width=\linewidth,keepaspectratio=TRUE]{figure/fig-linearFixOvercorrect3}
\caption{Corrected by Eqn \ref{LinearApprox}}
\end{subfigure}
\caption{The ratio of the length of the line to amplitude of the function needs to be included in the correction. Here, the amplitude is still 1, but the length of the line is 5. The correction factor leads to a massive over correction that makes the function almost unrecognizable. The plot on the left is uncorrected, the plot on the right is `corrected'.}\label{linearFixOvercorrect} 
\end{figure}

\subsubsection{A General Correction Method}
Another method for adjusting the vertical length to ensure constant extant width is to solve the system of equations
\begin{align*}
y_u & = f(x_u) + \ell/2\\
y_u & = \left(-1/f^\prime(x_0)\right) x_u + f(x_0) + x_0/f^\prime(x_0)
\end{align*}
for the upper endpoint $(x_u,y_u)$ at which the secant line intersects the top portion of the graph. Similarly, we would need to solve 
\begin{align*}
y_l & = f(x_l) - \ell/2\\
y_l & = \left(-1/f^\prime(x_0)\right) x_l + f(x_0) + x_0/f^\prime(x_0)
\end{align*}

for the lower endpoint $(x_l, y_l)$. With these two endpoints, we can correct separately for the top and bottom portions of the line, as the extant width is not symmetric when reflected across the original function f(x). \todo[inline]{Math language?}

As the solutions to these two sets of equations requires numerical optimization to obtain, at least for $f(x) = sin(x)$, Taylor approximations can be employed to reduce the computational requirements. Approximations derived from the first and second-order taylor approximations are described in the following sections.

\paragraph{Linear Approximation to $f(x)$}
Using the approximation $f(x) \approx f(x_0) + f^\prime(x_0)(x-x_0)$, the system of equations shown above reduces to
\begin{align*}
y & = f(x_0) + f^\prime(x_0)(x-x_0) \pm \ell/2\\
y & = \left(-1/f^\prime(x_0)\right) x + f(x_0) + x_0/f^\prime(x_0)
\end{align*}

Solving these systems of equations results in a symmetric overall correction factor of 
\begin{equation}\label{LinearApprox}
\sqrt{1 + f^\prime(x)^2} 
\end{equation}
\comment{Not sure if the pictures should be combined with the hammock plots, and if so, where the pictures should be located. }
Figure \ref{LinearApprox} shows the correction factor compared with the hammock-plot style correction and the untransformed data. As with the hammock plot correction, the linear adjustment is prone to the same overcorrection distortion shown in Figure \ref{linearFixOvercorrect}.  The asymmetric nature of the distortion suggests that we may want to use a second-order taylor polynomial approximation to $f(x)$ to account for the asymmetry in the extant widths on either side of the center trendline.

\subsubsection{Quadratic Approximation to f(x)}
Using the approximation $f(x) \approx f(x_0) + f^\prime(x_0)(x-x_0) + 1/2 f^{\prime\prime}(x_0)(x-x_0)^2$, the system of equations shown above reduces to
\begin{align*}
y & = f(x_0) + f(x_0) + f^\prime(x_0)(x-x_0) + 1/2 f^{\prime\prime}(x_0)(x-x_0)^2 \pm \ell/2\\
y & = \left(-1/f^\prime(x_0)\right) x + f(x_0) + x_0/f^\prime(x_0)
\end{align*}

Solving the system of equations provides endpoints $(x_l, y_l)$ and $(x_u, y_u)$ which can then be used to compute the extant width of each half-segment $\ell_\perp$. The correction factors are then $(\ell/2)/(\ell_{\perp_u})$ and $(\ell/2)/(\ell_{\perp_l})$ respectively. 
<<CtsMethodSetup, echo=FALSE, fig.keep='none'>>=
getSecantSegment <- function(x0, df, f, fprime, f2prime){
  secSlope   <- -1/fprime(x0)
  ell.x0     <- df$ell[which.min(abs(df$x-x0))]/2
  #--- Actual Roots
  #  temp       <- seq(min(df$x)-pi, max(df$x)+pi, .0001)
  #   leftend    <- temp[which.min(abs(f(temp) + ell.x1 - secSlope*(temp-x1)))]
  #   rightend   <- temp[which.min(abs(f(temp) - ell.x1 - secSlope*(temp-x1)))]
  #---
  
  #--- Approximation
  lambda1 <- (-(fprime(x0)^2 + 1) + sqrt((fprime(x0)^2 + 1)^2 - 2* fprime(x0)^2*f2prime(x0)*ell.x0))/(fprime(x0)^2*f2prime(x0))
  lambda2 <- (-(fprime(x0)^2 + 1) + sqrt((fprime(x0)^2 + 1)^2 + 2* fprime(x0)^2*f2prime(x0)*ell.x0))/(fprime(x0)^2*f2prime(x0))
  
  leftend <- lambda1*fprime(x0)+x0
  rightend <- lambda2*fprime(x0)+x0
  #---
  
  df2 <- data.frame(x=x0, y=f(x0), deriv=fprime(x0),
                    sec.xstart=leftend, sec.xend=rightend, 
                    sec.ystart=f(x0) -lambda1,
                    sec.yend = f(x0) -lambda2,
                    ell.orig = 2*ell.x0)

  df2$sec.ell1 <- with(df2, sqrt((sec.yend-y)^2+(sec.xend-x)^2))
  df2$sec.ell2 <- with(df2, sqrt((y-sec.ystart)^2+(x-sec.xstart)^2))
  df2$type <- "Perceived Width"
  return(df2)
}

getAdjLength<- function(df){
#   theta <- atan(df$deriv)  
#   df$seg.ystart <-  with(df, y+ell.orig/2*(1+cos(theta))-sec.ell1*cos(theta))
#   df$seg.yend   <-  with(df, y-ell.orig/2*(1+cos(theta))+sec.ell2*cos(theta))
  df$seg.ystart <- with(df, y+.5*(ell.orig)/sec.ell1)
  df$seg.ystart <- with(df, y-.5*(ell.orig)/sec.ell2)
  df
}

suppressMessages(library(ggplot2))
dframe <- createSine(n = 40, len = 1, f=f, fprime=fprime)
dframe$type <- "Data"

library(multicore)
secantlines <- do.call("rbind", mclapply(seq(0, 2*pi, length=40), function(i) getSecantSegment(i, dframe, f, fprime, f2prime)))
secantlines2 <- getAdjLength(secantlines)

library(plyr)
dframe2 <- secantlines
names(dframe2) <- c("x", "y", "deriv", "xstart", "xend", "ystart", "yend", "ell.orig", "ell1", "ell2", "type")

dframe2 <- rbind.fill(dframe, dframe2)
@

\subsection{Discussion of Transformations}
\clearpage


\section{Application: USHCN Data}
<<readdata, echo=FALSE>>=
ushcn <- na.omit(read.csv("data/ushcn.csv"))
monthly <- read.csv("data/monthly-avgs.csv")
suppressMessages(require(lubridate))
suppressMessages(require(ggplot2))
ushcn$Time <- as.Date(ushcn$Time)
monthly$time <- as.Date(monthly$time)
@

\begin{figure}[hbtp]
\centering
<<rawtemp, dependson='readdata', echo=FALSE, echo=FALSE, fig.width=12, fig.height=4.5, out.width='\\textwidth',cache=TRUE>>=
ggplot()  + geom_jitter(aes(Time, value/100), data=ushcn, size=1) + 
  geom_line(aes(time, avg/100), data=monthly, colour="steelblue", size=1.5) + 
  ylab("Temperature (in Celsius)")
# ggsave(file="figure/monthly-temps.pdf", width=12, height=4.5)
@
% \includegraphics[width=\textwidth]{monthly-temps}
\caption{\label{raw-temp}Raw monthly maximum temperatures (in Celsius) between 1980 and 2012 at 1218 stations across the US. The blue line shows fitted temperatures from a baseline model. The plot suggests that the model fails to capture the more extreme values in summer and winter. }
\end{figure}
\begin{figure}[hbtp]\centering
<<boxtemp, dependson='readdata', echo=FALSE, fig.width=12, fig.height=4.5, out.width='\\textwidth',cache=TRUE>>=
ggplot()  + geom_boxplot(aes(Time, value/100, group=interaction(Year, Month)), outlier.size=1, fill = "grey65", data=subset(ushcn, Year<1995)) + theme_bw() + 
  #geom_line(aes(time, avg/100), data=subset(monthly, year(time)<1995), colour="steelblue", size=1.5, alpha=.5) + 
  ylab("Temperature (in Celsius)")
# ggsave(file="figure/monthly-temps.pdf", width=12, height=4.5)
@

\caption{\label{box-temp}Monthly boxplot of maximum temperatures (in Celsius) between 1980 and 1995 at 1218 stations across the US. The sine illusion is less powerful but still visible in three locations:  the box area of the boxes,  the whiskers, and in the outliers.}
\end{figure}
\begin{figure}[hbtp]
\centering
<<residtemp, dependson='rawtemp', echo=FALSE, echo=FALSE, fig.width=12, fig.height=4.5, out.width='\\textwidth'>>=
ushcn <- merge(ushcn, monthly[,c("time", "avg")], by.x="Time", by.y="time")
ushcn$resid <- with(ushcn, value-avg)
ggplot()  + geom_jitter(aes(Time, resid/100), data=ushcn, size=1) + 
  geom_hline(yintercept=0, colour="steelblue", size=1) + 
  ylab("Residual temperature (in Celsius)") + theme_bw()
# ggsave(file="figure/monthly-resid-temps.pdf", width=12, height=4.5)
@
% \includegraphics[width=\textwidth]{monthly-resid-temps}
\caption{\label{resid-temp}Residual monthly temperatures (in Celsius) from the baseline model fit. The original impression of smaller deviations during Spring and Fall is now almost gone: Winters have larger negative residuals, while Summers have larger positive ones. }
\end{figure}

\begin{figure}[h!tbp]\centering
<<residtempboxplot, dependson='residtemp', echo=FALSE, echo=FALSE, fig.width=12, fig.height=4.5, out.width='\\textwidth'>>=
ggplot()  + geom_boxplot(aes(Year+(Month-1)/12, resid/100, group=Year+(Month-1)/12), data=subset(ushcn, Year<1995), size=1) + 
  # geom_hline(yintercept=0, colour="steelblue", size=1) + 
  ylab("Residual temperature (in Celsius)")
# ggsave(file="figure/monthly-resid-temps.pdf", width=12, height=4.5)
@
\end{figure}

Figures \ref{raw-temp} and \ref{resid-temp} show temperature data from 1218 stations across the US. The first plot shows raw temperatures, the second residuals from a `baseline' model. The caption for the raw temperature plot suggests that the baseline model is not quitable to capture all of the variability in summer and winter peaks. However, the model used is actually based on averages in each time point. This model is not  susceptible to shrinking values, and it is our perception of the plot rather than the data that makes us see any higher variability in the peaks. After removing the averages in figure \ref{resid-temp} the impression of higher variability in the peaks is gone with the exception of a few outliers.

\clearpage
\section{Conclusion}
\clearpage
\bibliographystyle{asa}
% argument is your BibTeX string definitions and bibliography database(s)
\bibliography{references}
\end{document}


